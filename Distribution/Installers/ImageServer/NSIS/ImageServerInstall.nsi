; Script generated by the HM NIS Edit Script Wizard.

; defines required for upgrade process
; the '1 ##VERSION string is used by the build script as a token
!define MAJOR_VERSION 1 ##MAJOR
!define MINOR_VERSION 1 ##MINOR
!define BUILD 1 ##BUILDNUMBER
!define REVISION 1 ##REVISIONNUMBER

!define PRODUCT_NAME "ClearCanvas Image Server"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}"
!define PRODUCT_PUBLISHER "ClearCanvas Inc"
!define PRODUCT_WEB_SITE "http://www.clearcanvas.ca"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"

!ifdef OFFICIALRELEASEBUILD
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_STARTMENU_FOLDER "$SMPROGRAMS\ClearCanvas\${PRODUCT_NAME}"
!define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Shred Host Service"
!define PRODUCT_VDIR_NAME "ImageServer"
!define PRODUCT_DB_NAME "ImageServer"
!define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME}"
!define PRODUCT_INSTALL_DIR "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME}"
!else
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_STARTMENU_FOLDER "$SMPROGRAMS\ClearCanvas\${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_SERVICE_NAME "${PRODUCT_NAME} Shred Host Service ${RELEASELABEL}"
!define PRODUCT_VDIR_NAME "ImageServer${RELEASELABEL}"
!define PRODUCT_DB_NAME "ImageServer${RELEASELABEL}"
!define PRODUCT_SHORTCUT_NAME "${PRODUCT_NAME} ${RELEASELABEL}"
!define PRODUCT_INSTALL_DIR "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME} ${RELEASELABEL}"
!endif

!ifdef RELEASELABEL
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION} ${RELEASELABEL}"
!else
  !define INSTALLER_DISPLAY_NAME "${PRODUCT_NAME} ${PRODUCT_VERSION}"
!endif

; controls whether or not to enable Enterprise screens
!define ENTERPRISEMODE True ##ENTERPRISEMODE

; controls whether or not script will enable upgrades to an existing db
; daily builds have this off and we'd only allow it for official releases
!define ALLOWDBUPGRADE True ##ALLOWDBUPGRADE

;define for common NSISIncludes Path
!define NSISINCLUDES "..\..\NSISIncludes"

; MUI 1.67 compatible ------
!include "${NSISINCLUDES}\dotNETCC.nsh"
!include "${NSISINCLUDES}\DumpLog.nsh"
!include "${NSISINCLUDES}\FileFunc.nsh"
!include "${NSISINCLUDES}\LogicLib.nsh"
!include "${NSISINCLUDES}\MUI.nsh"
!include "${NSISINCLUDES}\NSISArray.nsh"
!include "${NSISINCLUDES}\RemoveService.nsh"
!include "${NSISINCLUDES}\servicelib.nsh"
!include "${NSISINCLUDES}\VDirectory.nsh"
!include "${NSISINCLUDES}\XML.nsh"
!include "${NSISINCLUDES}\HandlePriorInstall.nsh"

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Platform-specific Settings (x86 vs. x64)
!ifdef PLATFORM_X64
!define PLATFORM_NAME "x64"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES64
!define PLATFORM_SUBFOLDER "x64"
!define PLATFORM_VC2008 "{350AA351-21FA-3270-8B7A-835434E766AD}"
!define PLATFORM_VC2008SP1 "{8220EEFE-38CD-377E-8595-13398D740ACE}"
!else
!define PLATFORM_X64 "false"
!define PLATFORM_NAME "x86"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES
!define PLATFORM_SUBFOLDER ""
!define PLATFORM_VC2008 "{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}"
!define PLATFORM_VC2008SP1 "{9A25302D-30C0-39D9-BD6F-21E6EC160475}"
!endif

; Check for .NET Framework defines
!define DOTNET_VERSION_REQ "3"
!define CHECKONLY "True" ;If flag is set True then only the check for .NET will happen, if not present will Abort Install

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "..\..\..\..\License.rtf"
!define MUI_PAGE_CUSTOMFUNCTION_LEAVE VerifyComponent
!insertmacro MUI_PAGE_COMPONENTS
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Custom page - get database admin login
Page custom PageDatabaseAdmin ValidatePageDatabaseAdmin
; Custom page - fetches database info
Page custom PageDatabaseInstall ValidatePageDatabaseInstall
; Custom page - fetches filesystem info
Page custom PageFileSystem ValidatePageFileSystem
; Custom page - fetches partition info
Page custom PagePartition ValidatePagePartition
; Custom page - fetches enterprise server info
Page custom PageAdminUser ValidatePageAdminUser
; Custom page - fetches enterprise server info
Page custom PageEnterpriseServer ValidatePageEnterpriseServer
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Finish page
!define MUI_FINISHPAGE_RUN
!define MUI_FINISHPAGE_RUN_TEXT "Start ClearCanvas Image Server Shred Host Service"
!define MUI_FINISHPAGE_RUN_FUNCTION "StartServiceFromFinishPage"
!insertmacro MUI_PAGE_FINISH

Function StartServiceFromFinishPage
  !insertmacro SERVICE "installed" "${PRODUCT_SERVICE_NAME}" "action=start;"
FunctionEnd


; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"

; Reserve files
ReserveFile "PageDatabaseAdmin.ini"
ReserveFile "PageDatabaseInstall.ini"
ReserveFile "PageFileSystem.ini"
ReserveFile "PagePartition.ini"
ReserveFile "PageEnterpriseServer.ini"
ReserveFile "PageAdminUser.ini"
!insertmacro MUI_RESERVEFILE_INSTALLOPTIONS
; MUI end ------

; Variables
; DB Version array that can be upgraded over
${Array} CAN_UPGRADE_OVER 1 24 ;24 length buffer to allow for 5 digits per component plus 3 dots and the NULL terminator
${ArrayFunc} WriteList
${ArrayFunc} Read
${ArrayFunc} SizeOf
 ;set in .oninit

; Collected in PageDatabaseAdmin.ini
Var INI_ADMINID
Var INI_ADMINPASS
Var INI_HOSTINSTANCE
Var INI_2SLASHHOSTINSTANCE
; Collected in PageDatabaseInstall.ini
Var INI_DBFILEDIR
Var INI_DBLOGDIR
Var INI_DBINDEXDIR
Var INI_DBQUEUEDIR
Var INI_DBSTATICDIR
Var INI_DBREMOTE
; Collected in PageFileSystem.ini
Var INI_FSDESC
Var INI_FSDIR
; Collected in PagePartition.ini
Var INI_AETITLE
Var INI_PARTITIONDESC
Var INI_PARTITIONFOLDER
Var INI_PARTITIONPORT
; Collected in PageEnterpriseServer.ini
Var INI_ESHOST
Var INI_ESPORT
Var INI_ESUSER
Var INI_ESPASS
; Collected in PageAdminUser.ini
Var INI_STANDALONEADMIN
Var INI_STANDALONEPASS
; Hardcoded for Virtual Directory folder name
Var VDIRNAME
; Various Flags and uninstall variables
Var IISPRESENT
Var OLD_DB_EXISTS
Var PRIOR_DB_VERSION
Var PERFORM_DB_UPGRADE
Var INSTALLED_DB
Var PERFORM_ASSEMBLY_UPGRADE
Var UNINSTALLER_STRING
; For Silent Install/Uninstaller
Var INI_REMOVEDB

Name "${INSTALLER_DISPLAY_NAME}"
OutFile "${PRODUCT_NAME}.exe"
InstallDir "${PRODUCT_INSTALL_DIR}"
ShowInstDetails show
ShowUnInstDetails show

#Core Components
  Section "-Scripts"
    SetOutPath "$INSTDIR\scripts"
    File /r /x *.svn* "..\Utilities\*.*"
    File /r /x *.svn* "..\Scripts\*.*"
    File /r /x *.svn* "..\..\..\..\ImageServer\Model\SqlServer2005\Scripts\*.*"
    File /r /x *.svn* "..\..\Common\Utilities\*.*"
    File /r /x *.svn* "..\..\Common\Scripts\*.*"
  SectionEnd

  Section "-InstallDir"
    SetShellVarContext all
    SetOutPath "$INSTDIR"
    SetOverwrite ifnewer
    CreateDirectory "${PRODUCT_STARTMENU_FOLDER}"
    File /x *.pdb "..\..\..\..\ImageServer\ShredHostService\bin\Release\*.*"
    File /x *.pdb "..\..\..\..\ImageServer\Executable\bin\Release\ClearCanvas.ImageServer.Executable.*"
  SectionEnd

  Section "-PluginDir"
    SetOutPath "$INSTDIR\plugins"
    ;All plugins are copied here with the exception of the archival set so that they can be optioned out if desired
    File /r /x *.svn* /x "ClearCanvas.ImageServer.Services.Archiving*.*" "..\..\..\..\ImageServer\ShredHostService\bin\Release\plugins\*.*"
    ;Delete "$INSTDIR\plugins\ClearCanvas.ImageServer.Codec.Jpeg2000.dll"
    ;Delete "$INSTDIR\plugins\ClearCanvas.ImageServer.Codec.Jpeg.dll"
  SectionEnd

  Section "-CommonDir"
    SetOutPath "$INSTDIR\common"
    File /r /x *.svn* "..\..\..\..\ImageServer\ShredHostService\bin\Release\common\*.*"
  SectionEnd

  Section "-UtilitiesDir"
    SetOutPath "$INSTDIR\utilities"
    File /x *.svn* "..\..\..\..\ImageServer\Utilities\ReconcileCleanup.bat"
  SectionEnd

  Section "-LoggingConfig"
    DetailPrint "Generating Logging.Config file"
    ${xml::LoadFile} "$INSTDIR\Logging.config" $0
    ${xml::GotoPath} "/log4net" $0
    ${xml::FirstChildElement} "appender" $0 $1

    loopfindAppender:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "AdoNetAppender" $0 foundAppender ;breaks loop

    ${xml::NextSiblingElement} "appender" $0 $1
    StrCmp $1 "0" loopfindAppender findAppenderFailed ;loops unless an error occurred

    foundAppender:
    ${xml::FirstChildElement} "connectionString" $0 $1
    ${xml::SetAttribute} "value" "Data Source=$INI_HOSTINSTANCE;User ID=$INI_ADMINID;Password=$INI_ADMINPASS;Initial Catalog=${PRODUCT_DB_NAME}" $0
    ${xml::SaveFile} "$INSTDIR\Logging.config" $0
    ${xml::Unload}
    Return

    findAppenderFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on logging component configuration. Review the installation log for details.  A reinstallation will be required."
  SectionEnd

  Section "-Docs"
    SetShellVarContext all
    SetOutPath "$INSTDIR"
    File "..\..\..\..\Docs\ImageServer\UsersGuide\CCImageServerUsersGuide.chm"
    CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\Users Guide.lnk" "$INSTDIR\CCImageServerUsersGuide.chm"
  SectionEnd

  Section "-ReferenceDatabaseUpgradeScripts"
    SetShellVarContext all
    SetOutPath "$INSTDIR\ReferenceDatabaseUpgradeScripts"
    File "..\..\..\..\ImageServer\Model\SqlServer2005\UpgradeScripts\*.sql"
  SectionEnd

  Section "-GenerateAppConfig"
    DetailPrint "Generating App.Config file"
    ${xml::LoadFile} "$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe.config" $0

    ## Connection String
    ${xml::GotoPath} "/configuration/connectionStrings" $0
    ${xml::FirstChildElement} "add" $0 $1

    loopAppConnectionString:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ImageServerConnectString" $0 foundAppConnectionString ;breaks loop

    ${xml::NextSiblingElement} "add" $0 $1
    StrCmp $1 "0" loopAppConnectionString AppConnectionStringFailed ;loops unless an error occurred

    foundAppConnectionString:
    ${xml::SetAttribute} "connectionString" "Data Source=$INI_HOSTINSTANCE;User ID=$INI_ADMINID;Password=$INI_ADMINPASS;Initial Catalog=${PRODUCT_DB_NAME}" $0

    Call SetAppConfigRemoteCoreServiceSettings

    ${xml::SaveFile} "$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe.config" $0
    ${xml::Unload}
    Return

    AppConnectionStringFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on service component configuration. Review the installation log for details.  A reinstallation will be required."
  SectionEnd

  Section "-GenerateExeAppConfig"
    DetailPrint "Generating Exe App.Config file"
    ${xml::LoadFile} "$INSTDIR\ClearCanvas.ImageServer.Executable.exe.config" $0

    ## Connection String
    ${xml::GotoPath} "/configuration/connectionStrings" $0
    ${xml::FirstChildElement} "add" $0 $1

    loopAppConnectionString:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ImageServerConnectString" $0 foundAppConnectionString ;breaks loop

    ${xml::NextSiblingElement} "add" $0 $1
    StrCmp $1 "0" loopAppConnectionString AppConnectionStringFailed ;loops unless an error occurred

    foundAppConnectionString:
    ${xml::SetAttribute} "connectionString" "Data Source=$INI_HOSTINSTANCE;User ID=$INI_ADMINID;Password=$INI_ADMINPASS;Initial Catalog=${PRODUCT_DB_NAME}" $0

    Call SetAppConfigRemoteCoreServiceSettings

    ${xml::SaveFile} "$INSTDIR\ClearCanvas.ImageServer.Executable.exe.config" $0
    ${xml::Unload}
    Return

    AppConnectionStringFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on exe component configuration. Review the installation log for details.  A reinstallation will be required."
  SectionEnd

SectionGroup /e "Database Components" GRPDB
LangString DESC_GRPDB ${LANG_ENGLISH} "The Image Server database components.  Creates or upgrades database and necessary data."
  Section "-GenerateDBJScript"
    DetailPrint "Generating script utility"
    GetFunctionAddress $R0 ReplaceInDBJscript
    Push $R0
    Push "$INSTDIR\scripts\dbgo.js"
    Call ReplaceInFile
  SectionEnd

  Section "-GenerateCreateDBScript"
    DetailPrint "Generating database creation script"
    GetFunctionAddress $R0 ReplaceInCreateDB
    Push $R0
    Push "$INSTDIR\scripts\TemplateImageServerDatabase.sql"
    Call ReplaceInFile
  SectionEnd

  Section "-GenerateRemoveDBScript"
    DetailPrint "Generating database removal script for uninstaller"
    GetFunctionAddress $R0 ReplaceInRemoveDB
    Push $R0
    Push "$INSTDIR\scripts\TemplateImageServerRemoveDatabase.sql"
    Call ReplaceInFile
  SectionEnd

  Section "-CreateDB"
    DetailPrint "Creating database..."
    nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$INSTDIR\scripts\TemplateImageServerDatabase.sql"'
    StrCpy $INSTALLED_DB 0
  SectionEnd

  Section "-CreateTables"
    DetailPrint "Creating database tables..."
    nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$INSTDIR\scripts\ImageServerTables.sql"'
  SectionEnd

  Section "-InsertingDefaultData"
    DetailPrint "Inserting default data..."
    ;nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbgo.js" "$INSTDIR\scripts\ImageServerDefaultData.sql"'
    nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$INSTDIR\scripts\ImageServerDefaultData.sql"'
  SectionEnd

  Section "-CreateStoredProcedures"
    DetailPrint "Creating stored procedures..."
    nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$INSTDIR\scripts\ImageServerStoredProcedures.sql"'
  SectionEnd

  Section "-VersionDB"
    FileOpen $0 "$INSTDIR\scripts\imageServerDbVersion.sql" w
    FileWrite $0 "INSERT INTO [${PRODUCT_DB_NAME}].[dbo].DatabaseVersion_ ( Major_, Minor_, Build_, Revision_ ) VALUES ( '${MAJOR_VERSION}', '${MINOR_VERSION}', '${BUILD}', '${REVISION}')$\n"
    FileWrite $0 "GO$\n"
    FileClose $0

    DetailPrint "Versioning database..."
    nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$INSTDIR\scripts\imageServerDbVersion.sql"'
  SectionEnd

  Section "-CheckForProperDbCreation"
    Call GetDBVersion
    Pop $1

    ${If} $1 != ${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD}.${REVISION}
       MessageBox MB_ICONSTOP|MB_OK "The installer has failed to create the database.  Aborting Install.  Check install.log for details."

       StrCpy $0 "$INSTDIR\install.log"
       Push $0
       Call DumpLog
       Quit
    ${EndIf}

  SectionEnd
SectionGroupEnd

SectionGroup /e "Server Data Initialization" GRPDATAINI
  LangString DESC_GRPDATAINI ${LANG_ENGLISH} "Set of sample data for fresh Image Server installation.  Requires database component."
  Section "-CreateFilesystem"
    DetailPrint "Creating filesystem..."

    FileOpen $0 "$TEMP\FileSystem.sql" w
    FileWrite $0 "DECLARE @FilesystemTierEnum smallint$\n"
    FileWrite $0 "SET @FilesystemTierEnum = (SELECT [Enum] FROM [${PRODUCT_DB_NAME}].[dbo].[FilesystemTierEnum] WHERE Lookup = 'Tier1')$\n"
    FileWrite $0 "EXECUTE [${PRODUCT_DB_NAME}].[dbo].[InsertFilesystem]$\n"
    FileWrite $0 "@FilesystemTierEnum$\n"
    FileWrite $0 ",'$INI_FSDIR'$\n"
    FileWrite $0 ",1$\n"
    FileWrite $0 ",0$\n"
    FileWrite $0 ",0$\n"
    FileWrite $0 ",'$INI_FSDESC'$\n"
    FileWrite $0 ",90$\n"
    FileWrite $0 ",80$\n"
    FileWrite $0 "GO"
    FileClose $0

    nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$TEMP\FileSystem.sql"'

    Delete "$TEMP\FileSystem.sql"
  SectionEnd

  Section "-CreatePartition"
    DetailPrint "Creating partition..."
    FileOpen $0 "$TEMP\Partition.sql" w
    FileWrite $0 "DECLARE @DuplicateSopPolicyEnum smallint$\n"
    FileWrite $0 "SELECT @DuplicateSopPolicyEnum=Enum FROM [${PRODUCT_DB_NAME}].[dbo].[DuplicateSopPolicyEnum] WHERE [Lookup]='SendSuccess'$\n"
    FileWrite $0 "EXECUTE [${PRODUCT_DB_NAME}].[dbo].[InsertServerPartition]$\n"
    FileWrite $0 "1$\n"
    FileWrite $0 ",'$INI_PARTITIONDESC'$\n"
    FileWrite $0 ",'$INI_AETITLE'$\n"
    FileWrite $0 ",'$INI_PARTITIONPORT'$\n"
    FileWrite $0 ",'$INI_PARTITIONFOLDER'$\n"
    FileWrite $0 ",@DuplicateSopPolicyEnum$\n"
    FileWrite $0 "GO"
    FileClose $0

    nsExec::ExecToLog '"$INSTDIR\scripts\SSEUtil.exe" -m -s $INI_HOSTINSTANCE -user $INI_ADMINID -pwd $INI_ADMINPASS -run "$TEMP\Partition.sql"'

    Delete "$TEMP\Partition.sql"
  SectionEnd
SectionGroupEnd

SectionGroup /e "Service Components" GRPSRV
  LangString DESC_GRPSRV ${LANG_ENGLISH} "Installs Image Server services."
  Section "-C Runtime Install"
    # Visual C++ 2008
      ;Checks if it's already installed and skips if it is
      ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008}" "Version"
      ${IfNotThen} "$0" == "" ${|} goto sp1 ${|}

      Push $0
      SetOutPath "$TEMP"
      File "..\..\..\Redistributables\Visual C++ 2008\vcredist_${PLATFORM_NAME}.exe"
      DetailPrint "Pausing installation while runtime components of Visual C++ 2008 Libraries are installed."

      IfSilent silentruntime normalruntime

      silentruntime:
      ExecWait '$TEMP\Vcredist_${PLATFORM_NAME}.exe /q:a /c:"msiexec /i vcredist.msi /qn /l*v %temp%\vcredist_${PLATFORM_NAME}.log"' $0
      goto checkruntime

      normalruntime:
      ExecWait '$TEMP\vcredist_${PLATFORM_NAME}.exe /Q' $0
      goto checkruntime

      checkruntime:
      ${If} $0 != 0
        MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 is installed.  Please manually perform the install of the Microsoft Visual C++ 2008 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
      ${EndIf}

      sp1:
      # Visual C++ 2008 SP1
      ;Checks if it's already installed and skips if it is
      ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008SP1}" "Version"
      ${IfNotThen} "$0" == "" ${|} Return ${|}

      Push $0
      SetOutPath "$TEMP"
      File "..\..\..\Redistributables\Visual C++ 2008 SP1\vcredist_${PLATFORM_NAME}.exe"
      DetailPrint "Pausing installation while runtime components of Visual C++ 2008 SP1 Libraries are installed."

      IfSilent silentruntimesp1 normalruntimesp1

      silentruntimesp1:
      ExecWait '$TEMP\Vcredist_${PLATFORM_NAME}.exe /q:a /c:"msiexec /i vcredist.msi /qn /l*v %temp%\vcredist_${PLATFORM_NAME}.log"' $0
      goto checkruntime

      normalruntimesp1:
      ExecWait '$TEMP\vcredist_${PLATFORM_NAME}.exe /Q' $0
      goto checkruntimesp1

      checkruntimesp1:
      ${If} $0 != 0
        MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 SP1 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 SP1 is installed..  Please manually perform the install of the Microsoft Visual C++ 2008 SP1 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
      ${EndIf}
  SectionEnd

  Section "-ShredHostServiceInstall"
    !insertmacro SERVICE "create" "${PRODUCT_SERVICE_NAME}" \
    "path=$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe -service;autostart=1;display=ClearCanvas Image Server Shred Host Service ${RELEASELABEL};"

    ;Sets description
    WriteRegStr HKLM \
    "SYSTEM\CurrentControlSet\Services\${PRODUCT_SERVICE_NAME}" \
    "Description" "Hosts the ClearCanvas Image Server Server Threads (Shreds)."
  SectionEnd

  Section "Archiving Components" SECARC
    SetOutPath "$INSTDIR\plugins"
    File /r /x *.svn* "..\..\..\..\ImageServer\ShredHostService\bin\Release\plugins\ClearCanvas.ImageServer.Services.Archiving*.*"
  SectionEnd
  LangString DESC_SECARC ${LANG_ENGLISH} "Plugins to support HSM archival."

  #Enterprise Server Initialization
  Section "-Initialize Enterprise Server"
    ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}
    DetailPrint "Enterprise Server Initialization..."
    MessageBox MB_YESNO "Import Image Server authority tokens into the Enterprise Server?" IDNO +3
      nsExec::ExecToLog '"$INSTDIR\ClearCanvas.ImageServer.Executable.exe" ClearCanvas.Enterprise.Common.Setup.SetupApplication /suid:$INI_ESUSER /spwd:$INI_ESPASS /g-'

  SectionEnd

  ;Section "-StartService"
  ;  DetailPrint "Starting Service..."
  ; !insertmacro SERVICE "installed" "${PRODUCT_SERVICE_NAME}" "action=start;"
  ;SectionEnd
SectionGroupEnd

SectionGroup /e "Web Components" GRPWEB
  LangString DESC_GRPWEB ${LANG_ENGLISH} "Image Server web pages."
  Section "-WebDir"
    SetOutPath "$INSTDIR\web"
    File /r /x *.svn* "..\..\..\..\ImageServer\Web\ApplicationDeployment\Release\*.*"
  SectionEnd

  Section "-GenerateWebConfig"
    DetailPrint "Configuring Web"

    ${xml::LoadFile} "$INSTDIR\web\Web.config" $0

    ## Database connection
    ${xml::GotoPath} "/configuration/connectionStrings" $0
    ${xml::FirstChildElement} "add" $0 $1

    loopConnectionString:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "ImageServerConnectString" $0 foundConnectionString ;breaks loop

    ${xml::NextSiblingElement} "add" $0 $1
    StrCmp $1 "0" loopConnectionString webconfigFailed ;loops unless an error occurred

    foundConnectionString:
    ${xml::SetAttribute} "connectionString" "Data Source=$INI_HOSTINSTANCE;User ID=$INI_ADMINID;Password=$INI_ADMINPASS;Initial Catalog=${PRODUCT_DB_NAME}" $0

    Call SetAppConfigRemoteCoreServiceSettings

    ${xml::SaveFile} "$INSTDIR\web\Web.config" $0
    ${xml::Unload}
    Return

    webconfigFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on web component configuration.  Review the installation log for details.  A reinstallation will be required."
    ${xml::Unload}
  SectionEnd

  Section "-LoggingConfig"
    DetailPrint "Generating Logging.Config file"
    ${xml::LoadFile} "$INSTDIR\web\Logging.config" $0
    ${xml::GotoPath} "/log4net" $0
    ${xml::FirstChildElement} "appender" $0 $1

    loopfindAppender:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "AdoNetAppender" $0 foundAppender ;breaks loop

    ${xml::NextSiblingElement} "appender" $0 $1
    StrCmp $1 "0" loopfindAppender findAppenderFailed ;loops unless an error occurred

    foundAppender:
    ${xml::FirstChildElement} "connectionString" $0 $1
    ${xml::SetAttribute} "value" "Data Source=$INI_HOSTINSTANCE;User ID=$INI_ADMINID;Password=$INI_ADMINPASS;Initial Catalog=${PRODUCT_DB_NAME};integrated security=false;persist security info=True" $0
    ${xml::SaveFile} "$INSTDIR\web\Logging.config" $0
    ${xml::Unload}
    Return

    findAppenderFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on logging component configuration. Review the installation log for details.  A reinstallation will be required."
  SectionEnd

  Section "-ConfigureStandAloneUser"
    ${IfThen} ${ENTERPRISEMODE} == True ${|} Return ${|}

    DetailPrint "Configuring Admin User"
    ${xml::LoadFile} "$INSTDIR\web\Users.xml" $0

    ${xml::GotoPath} "/Users/User" $0
    ${xml::SetAttribute} "UserName" "$INI_STANDALONEADMIN" $0

    ${xml::FirstChildElement} "Password" $0 $1
    ${xml::SetText} "$INI_STANDALONEPASS" $1

    ${xml::SaveFile} "$INSTDIR\web\Users.xml" $0
    ${xml::Unload}
    Return
  SectionEnd


  Section "-Permissions"
    AccessControl::GrantOnFile "$INSTDIR\Web" "Users"  "GenericRead + GenericWrite + GenericExecute + Delete"
    AccessControl::GrantOnFile "$INSTDIR\Web\Web.config" "Users"  "GenericRead + GenericWrite + GenericExecute + Delete"
    AccessControl::GrantOnFile "$INSTDIR\web\Logging.config" "Users"  "GenericRead + GenericWrite + GenericExecute + Delete"
  SectionEnd

  Section "-CreateVirtualDirectory"
    DetailPrint "Creating virtual directory..."
    ClearErrors
    StrCpy $VDIRNAME "${PRODUCT_VDIR_NAME}"
    Call CreateVDir
    IfErrors "" +2
      MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on web virtual directory configuration. Review the installation log for details.  A reinstallation will be required."

    ;Adding Mime Type for Silverlight
    !insertmacro RegisterMimeType ".xap" "application/x-silverlight-2"
  SectionEnd
SectionGroupEnd

#Database Upgrade Section
Section /o "-CheckDBEligibility" SECUPGRADEDB
  DetailPrint "Checking database upgrade eligibility..."

  ##Require that the adonet log4net appender is commented out since some older versions don't yet have the ApplicationLog table
  GetFunctionAddress $R0 CommentOutAdoNetAppender
    Push $R0
    Push "$INSTDIR\Logging.config"
    Call ReplaceInFile

  nsExec::ExecToLog '"$INSTDIR\ClearCanvas.ImageServer.Executable.exe" ClearCanvas.Enterprise.Core.Upgrade.PersistentStoreUpgradeApplication /check"'
  Pop $0
  StrCmp $0 "-1" checkUnknownVersion
  StrCmp $0 "0" checkDbUpToDate
  StrCmp $0 "1" checkNeedsUpdate

checkUnknownVersion:
  MessageBox MB_OK|MB_ICONSTOP "The installation has detected an existing database but this version cannot be upgraded with this installer.  Installer will abort."
  WriteUninstaller "$INSTDIR\uninst.exe"

  GetFunctionAddress $R0 RestoreAdoNetAppender
    Push $R0
    Push "$INSTDIR\Logging.config"
    Call ReplaceInFile

  Quit
checkDbUpToDate:
  MessageBox MB_OK|MB_ICONINFORMATION "The installation has detected that the existing database is up to date. No database upgrade is required."
  Goto restoreLoggingConfig
checkNeedsUpdate:
  DetailPrint "Upgrading database..."

  #Temporarily setting the timeout to 1200 as per ticket #4555
  Push 1200
  Call UpdateTimeout
  Pop $0
  ${If} $0 = "-1"
        DetailPrint "Update of timeout value in configuration file failed.  Database upgrade attempt was not made."
        Goto upgradeFail
  ${EndIf}

  nsExec::ExecToLog '"$INSTDIR\ClearCanvas.ImageServer.Executable.exe" ClearCanvas.Enterprise.Core.Upgrade.PersistentStoreUpgradeApplication"'
  Pop $0
  StrCmp $0 "-1" upgradeFail
  StrCmp $0 "0" upgradeSuccess

upgradeFail:
  DetailPrint "The attempt at upgrading the database failed in some way. Please see logs for more details."
  MessageBox MB_OK|MB_ICONSTOP "The attempt at upgrading the database failed in some way. Please see logs for more details."
  Goto restoreLoggingConfig
upgradeSuccess:
  #Reset the timeout to 120 as per ticket #4555
  Push 120
  Call UpdateTimeout
  Pop $0
  ${If} $0 = "-1"
        DetailPrint "Database upgrade was successful but reset of timeout value in configuration file failed."
        Goto upgradeFail
  ${EndIf}

  DetailPrint "Database upgrade successful"
  Goto restoreLoggingConfig

restoreLoggingConfig:
  GetFunctionAddress $R0 RestoreAdoNetAppender
    Push $R0
    Push "$INSTDIR\Logging.config"
    Call ReplaceInFile
SectionEnd

# Service Removal Sections
Section /o "-No Database" NODB
  RMDir /r "$INSTDIR\scripts"
SectionEnd

Section /o "-No Service" NOSRV
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\common"
  Delete "$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe.config"
  Delete "$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe"
  Delete "$INSTDIR\Logging.config"
SectionEnd

Section -AdditionalIcons
  SetShellVarContext all
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\ClearCanvas Website.lnk" "${PRODUCT_WEB_SITE}"
  CreateShortCut "${PRODUCT_STARTMENU_FOLDER}\Uninstall ${PRODUCT_SHORTCUT_NAME}.lnk" "$INSTDIR\uninst.exe"
SectionEnd


Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"

  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog

  ${CAN_UPGRADE_OVER->Delete}
SectionEnd

!insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPDB} $(DESC_GRPDB)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPDATAINI} $(DESC_GRPDATAINI)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPSRV} $(DESC_GRPSRV)
  !insertmacro MUI_DESCRIPTION_TEXT ${SECARC} $(DESC_SECARC)
  !insertmacro MUI_DESCRIPTION_TEXT ${GRPWEB} $(DESC_GRPWEB)
!insertmacro MUI_FUNCTION_DESCRIPTION_END


Function .onInit
  ; Getting Started
  MessageBox MB_YESNO|MB_ICONINFORMATION \
    "BEFORE YOU INSTALL$\n$\nPlease read our Getting Started Guide for information about the prerequisites and install process.$\n$\nOpen a browser to the Getting Started Guide now?" \
    IDNO guideDone
  ExecShell "open" "www.clearcanvas.ca/docs/GettingStartedGuide"

  guideDone:

  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseAdmin.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDatabaseInstall.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageFileSystem.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PagePartition.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageEnterpriseServer.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageAdminUser.ini"

  #this array will eventually contain all possible versions that this installer is capable of upgrading over
  ${CAN_UPGRADE_OVER->Init}
   #additional entries on this list are to be added with a space delimiter
   ## These first three are reversed since in older builds 'Build' and 'Revision' were reversed in the database
  ${CAN_UPGRADE_OVER->WriteList} "1.3.27241.8146 1.3.27242.8146 1.4.29698.9277 1.5.10019.31163 1.5.10588.32543 1.5.10676.32680 1.5.10852.32944 1.5.12104.35993 2.0.12655.37768 2.2.13745.40623"


  ; Check for Platform compared to installer platform
  GetVersion::WindowsPlatformArchitecture
   Pop $R0
  ${If} $R0 == "32"
  ${AndIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 64-bit version of ${PRODUCT_NAME} cannot be installed on a 32-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${ElseIf} $R0 == "64"
  ${AndIf} ${PLATFORM_NAME} == "x86"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 32-bit version of ${PRODUCT_NAME} cannot be installed on a 64-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${EndIf}

  ; Check for Windows Version
  ; using WindowsName instead of WindowsVersion because of difficulties encountered in performing
  ; numerical comparisons on version numbers.
  GetVersion::WindowsName
   Pop $R0
   ${If} $R0 == "95 OSR2"
   ${OrIf} $R0 == "95"
   ${OrIf} $R0 == "98 SE"
   ${OrIf} $R0 == "98"
   ${OrIf} $R0 == "ME"
   ${OrIf} $R0 == "NT"
   ${OrIf} $R0 == "CE"
   ${OrIf} $R0 == "2000"
     MessageBox MB_OK|MB_ICONEXCLAMATION "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
     Abort "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
   ${EndIf}

  ; Check for .NET Framework Install
  ; discovered an unexpected formatting idiosyncrasy for the version string passed into CheckDotNet
  ; e.g. if the req'd version is 3.0.1 or higher but installed version is 3.0.04502.0
  ; using 3.0.1 or 3.0.10... 3.0.1000 doesn't work.  Have to specify 3.0.10000 or a greater number of zeroes
  !insertmacro CheckDotNET "${DOTNET_VERSION_REQ}" "${CHECKONLY}"

  ; Check for prior or conflicting versionsand prompt to uninstall them before continuing
  Push "ClearCanvas.ImageServer.ShredHostService.exe" ;version determining assembly
  GetFunctionAddress $R0 InstalledVersionLower
  Push $R0
  GetFunctionAddress $R0 SameVersionInstalled
  Push $R0
  GetFunctionAddress $R0 InstalledVersionHigher
  Push $R0
  GetFunctionAddress $R0 FailedUninstall
  Push $R0
  Call HandlePriorInstall

FunctionEnd

Function installedVersionHigher
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that a NEWER version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}."
  Abort
FunctionEnd

Function sameVersionInstalled
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that the SAME version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}."
  Abort
FunctionEnd

Function installedVersionLower
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "Installer has detected that an older ${PRODUCT_NAME} version is already installed. $\n$\nClick `OK` to proceed with upgrade or `Cancel` to cancel this upgrade." \
  IDOK setUninstall
  Abort

  ;Run the uninstaller
  setUninstall:
  StrCpy $PERFORM_ASSEMBLY_UPGRADE "True"
  StrCpy $UNINSTALLER_STRING '$R0'
  Return
FunctionEnd

Function FailedUninstall
  MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of the previous version."
  Abort
FunctionEnd

Function SetAppConfigRemoteCoreServiceSettings
  ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}

  ## Enterprise Server connection
    ;RemoteCoreServiceSettings
    ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.Enterprise.Common.RemoteCoreServiceSettings" $0
    ${xml::FirstChildElement} "setting" $0 $1

    loopRemoteCoreServiceSettingBaseUrl:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "BaseUrl" $0 foundRemoteCoreServiceSettingBaseUrl ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopRemoteCoreServiceSettingBaseUrl AppConfigFailed ;loops unless an error occurred

    foundRemoteCoreServiceSettingBaseUrl:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "net.tcp://$INI_ESHOST:$INI_ESPORT/" $1
    Return

    AppConfigFailed:
    MessageBox MB_OK|MB_ICONSTOP "A failure has occurred on RemoteCoreServiceSettings service component configuration. Review the installation log for details.  A reinstallation will be required."
FunctionEnd

##Function Includes
!insertmacro RemoveService "ClearCanvas.ImageServer.ShredHostService.exe" "${PRODUCT_SERVICE_NAME}"
!insertmacro VDirectory
!insertmacro un.GetParameters
!insertmacro un.GetOptions

;--------------------------------
; Modified CheckIISVersion Function taken from:
; http://nsis.sourceforge.net/Check_IIS_Version_Before_Installing
;
; This is built off MSFT's required keys for IIS
; (info at http://nsis.sf.net/wiki)
; and the NSIS Wiki (http://nsis.sf.net/wiki).
Function CheckIISVersion

	ClearErrors
	ReadRegDWORD $0 HKLM "SOFTWARE\Microsoft\InetStp" "MajorVersion"
	ReadRegDWORD $1 HKLM "SOFTWARE\Microsoft\InetStp" "MinorVersion"

	;IfErrors 0 NoAbort
	;Abort "Setup could not detect Microsoft Internet Information Server v5 or later; this is required for installation. Setup will abort."

	IntCmp $0 5 NoAbort IISMajVerLT5 NoAbort
        StrCpy $IISPRESENT "true"
        Return

	NoAbort:
		DetailPrint "Found Microsoft Internet Information Server v$0.$1"
		Goto ExitFunction

	IISMajVerLT5:
                MessageBox MB_YesNo|MB_ICONEXCLAMATION "Microsoft Internet Information Server v5 or later was not detected on this machine.  This will prevent the Web Component from being deployed.  $\nIt is possible to manually create the virtual folder once IIS is installed if you choose to proceed.  $\n$\nContinue with Installation?  No will Abort." IDYES continueNoIIS
                Quit

        continueNoIIS:
        StrCpy $IISPRESENT "false"

	ExitFunction:

FunctionEnd


Function VerifyComponent
  SectionGetFlags ${GRPDB} $R1
  IntOp $R1 $R1 & ${SF_SELECTED}
  SectionGetFlags ${GRPSRV} $R2
  IntOp $R2 $R2 & ${SF_SELECTED}
  SectionGetFlags ${GRPSRV} $R3
  IntOp $R3 $R3 & ${SF_PSELECTED}
  SectionGetFlags ${GRPWEB} $R4
  IntOp $R4 $R4 & ${SF_SELECTED}
  SectionGetFlags ${GRPDATAINI} $R5
  IntOp $R5 $R5 & ${SF_SELECTED}

  #Verify Selection
  ${IfNot} $R1 == ${SF_SELECTED}
  ${AndIfNot} $R2 == ${SF_SELECTED}
  ${AndIfNot} $R3 == ${SF_PSELECTED}
  ${AndIfNot} $R4 == ${SF_SELECTED}
  ${AndIfNot} $R5 == ${SF_SELECTED}
    MessageBox MB_OK|MB_ICONINFORMATION "At least one component must be selected to continue."
    Abort
  ${EndIf}

  #Check for solo selection
  ${If} $R5 = ${SF_SELECTED}
  ${AndIf} $R1 != ${SF_SELECTED}
    MessageBox MB_OK|MB_ICONINFORMATION "Server Data Initialization cannot be selected without the Database Components."
    Abort
  ${EndIf}

  #VerifyReq's
  ${If} $R4 == ${SF_SELECTED}
    Call CheckIISVersion
  ${EndIf}

  #No Server
  ${If} $R2 != ${SF_SELECTED}
  ${AndIf} $R3 != ${SF_PSELECTED}
    !insertmacro SetSectionFlag ${NOSRV} ${SF_SELECTED}
  ${EndIf}

  #No DB
  ${If} $R1 != ${SF_SELECTED}
    !insertmacro SetSectionFlag ${NODB} ${SF_SELECTED}
  ${EndIf}
FunctionEnd


LangString PageDatabaseAdmin_TITLE ${LANG_ENGLISH} "Database administration page"
LangString PageDatabaseAdmin_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database installation connection details."
LangString PageDatabaseInstall_TITLE ${LANG_ENGLISH} "Database and user installation page"
LangString PageDatabaseInstall_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the database and general user creation details."
LangString PageFileSystem_TITLE ${LANG_ENGLISH} "Filesystem setup page"
LangString PageFileSystem_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the filesystem creation details."
LangString PagePartition_TITLE ${LANG_ENGLISH} "Partition setup page"
LangString PagePartition_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the partition details."
LangString PageAdminUser_TITLE ${LANG_ENGLISH} "Web UI Admin User creation page"
LangString PageAdminUser_SUBTITLE ${LANG_ENGLISH} "This page is used to create the Web UI administrator user account."
LangString PageEnterpriseServer_TITLE ${LANG_ENGLISH} "Enterprise Server connection setup page"
LangString PageEnterpriseServer_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Enterprise Server connection details."

Function PageDatabaseAdmin
  !insertmacro MUI_HEADER_TEXT "$(PageDatabaseAdmin_TITLE)" "$(PageDatabaseAdmin_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDatabaseAdmin.ini"
FunctionEnd

Function ValidatePageDatabaseAdmin
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ADMINID "PageDatabaseAdmin.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ADMINPASS "PageDatabaseAdmin.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_HOSTINSTANCE "PageDatabaseAdmin.ini" "Field 7" "State"

  Call TestDbConnect
  Pop $0
  StrCmp $0 "error" errScriptEngineMissing
  StrCmp $0 "0" "" errConnectionTestFailed

  ; Database Existence Test
  Call DBExists
  Pop $0
  StrCmp $0 "0" resultNoDB
  StrCmp $0 "1" resultDB

resultDB:
  StrCpy $OLD_DB_EXISTS True
  ${If} ${ALLOWDBUPGRADE} == True
    Call GetDBVersion
    Pop $PRIOR_DB_VERSION

    ${If} $PRIOR_DB_VERSION == ${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD}.${REVISION}
       MessageBox MB_ICONINFORMATION|MB_OK "The installer has detected an existing database that matches the version of this installer.  The installer will proceed to use this database without attempting to re-create or upgrade this database."
       Goto oldDBNoUpgrade
    ${EndIf}

    ${CAN_UPGRADE_OVER->SizeOf} $R0 $R1 $R2 ;$R2 is used fields in array i.e. Count

    StrCpy $0 0
    loopDbVersionTest:
      ${CAN_UPGRADE_OVER->Read} $R3 $0
      StrCmp $R3 $PRIOR_DB_VERSION exitCanUpgrade

      IntOp $0 $0 + 1
      IntCmp $0 $R2 exitCannotUpgrade
      Goto loopDbVersionTest

    exitCannotUpgrade:
    MessageBox MB_ICONSTOP|MB_OKCANCEL "Installer has detected an existing database with version $PRIOR_DB_VERSION but this installer cannot upgrade the detected database version.  Continue install *without* upgrading the database? $\n$\nProceeding is NOT suggested since install may not be functional.  `Cancel` will abort installation." IDOK oldDBNoUpgrade
      Quit

    exitCanUpgrade:
    MessageBox MB_ICONEXCLAMATION|MB_YESNOCANCEL "Installer has detected an existing database.  Attempt to perform database upgrade?$\n$\nProceeding without upgrade is NOT suggested since install may not be functional.$\n$\n`Yes` proceeds with upgrade. `No` skips upgrade attempt.  `Cancel` will abort installation." IDYES oldDBUpgrade IDNO oldDBNoUpgrade
      Quit

  oldDBNoUpgrade:
    StrCpy $PERFORM_DB_UPGRADE False
    ; Must stop attempt to create database again if it already exists and turn off upgrade sections
    !insertmacro UnSelectSection ${GRPDB}
    !insertmacro UnSelectSection ${GRPDATAINI}
    !insertmacro SetSectionFlag ${NODB} ${SF_SELECTED}
    goto performUninstallOfPreviousVersion

  oldDBUpgrade:
    StrCpy $PERFORM_DB_UPGRADE True

    ; Must stop attempt to create database again if it already exists and turn on upgrade sections
    !insertmacro UnSelectSection ${GRPDB}
    !insertmacro UnSelectSection ${GRPDATAINI}
    !insertmacro SetSectionFlag ${SECUPGRADEDB} ${SF_SELECTED}
    !insertmacro SetSectionFlag ${NODB} ${SF_SELECTED}
    goto performUninstallOfPreviousVersion
  ${EndIf}

  ## Case where upgrades are suppressed
  goto performUninstallOfPreviousVersion

resultNoDB:
  StrCpy $OLD_DB_EXISTS False
  StrCpy $PERFORM_DB_UPGRADE False
  goto performUninstallOfPreviousVersion


## All paths go through this section
performUninstallOfPreviousVersion:
  #Determine whether or not prior DB needs to be removed
  ${If} $PERFORM_DB_UPGRADE == "True"
    StrCpy $R4 "False"
  ${Else}
    StrCpy $R4 "True"
  ${EndIf}

  ${If} $PERFORM_ASSEMBLY_UPGRADE == "True"
    ClearErrors
    ExecWait '$UNINSTALLER_STRING /S /REMOVEDB=$R4 _?=$INSTDIR' $R5
    IfErrors failedUninstall
    StrCmp $R5 "0" done failedUninstall
  ${Else}
    #Don't need to upgrade
    Return
  ${EndIf}

  done:
  Return

  failedUninstall:
  MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of the previous version."
    Abort


#Error conditions - return to page
errConnectionTestFailed:
  MessageBox MB_ICONEXCLAMATION|MB_OK "Connection test failed.  Please check connection details and ensure they are correct."
  Abort
errScriptEngineMissing:
  MessageBox MB_ICONEXCLAMATION|MB_OK "Connection test could not be run.  This is most likely because Windows Script Engine is missing or requires re-installation.  Please rectify before continuing."
  Abort
FunctionEnd

Function PageDatabaseInstall
  ; This page and the database section will not run in the upgrade scenario
  SectionGetFlags ${GRPDB} $0
  # Do a binary AND of $0 and SF_SELECTED and put results in $0
  IntOp $0 $0 & ${SF_SELECTED}
  IntCmp $0 ${SF_SELECTED} +2
    Return

  ${If} ${ALLOWDBUPGRADE} == True
  ${AndIf} $PERFORM_DB_UPGRADE == True
    Return
  ${EndIf}

  ${If} $OLD_DB_EXISTS == True
    MessageBox MB_ICONSTOP|MB_OK "Installer has detected an existing database.  Installer cannot continue.  OK will abort installation."
    Quit
  ${EndIf}

  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageDatabaseInstall.ini" "Field 3" "State" "${PRODUCT_DB_NAME}"
  !insertmacro MUI_HEADER_TEXT "$(PageDatabaseInstall_TITLE)" "$(PageDatabaseInstall_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDatabaseInstall.ini"
FunctionEnd

Function ValidatePageDatabaseInstall
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBFILEDIR "PageDatabaseInstall.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBLOGDIR "PageDatabaseInstall.ini" "Field 7" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBINDEXDIR "PageDatabaseInstall.ini" "Field 9" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBQUEUEDIR "PageDatabaseInstall.ini" "Field 11" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBSTATICDIR "PageDatabaseInstall.ini" "Field 13" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_DBREMOTE "PageDatabaseInstall.ini" "Field 14" "State"

  IntCmp $INI_DBREMOTE 1 remoteServer
    IfFileExists "$INI_DBFILEDIR\*.*" +6 ""
      MessageBox MB_YESNO|MB_ICONQUESTION "The DB File Directory specified doesn't exist, create it?" IDNO +3
      CreateDirectory $INI_DBFILEDIR
      IfErrors "" +3
      MessageBox MB_ICONEXCLAMATION|MB_OK "Directory cannot be created.  Please specify another directory."
      Abort
    IfFileExists "$INI_DBLOGDIR\*.*" +6 ""
      MessageBox MB_YESNO|MB_ICONQUESTION "The DB Log File Directory specified doesn't exist, create it?" IDNO +3
      CreateDirectory $INI_DBLOGDIR
      IfErrors "" +3
      MessageBox MB_ICONEXCLAMATION|MB_OK "Directory cannot be created.  Please specify another directory."
      Abort
    IfFileExists "$INI_DBINDEXDIR\*.*" +6 ""
      MessageBox MB_YESNO|MB_ICONQUESTION "The DB Index File Group Directory specified doesn't exist, create it?" IDNO +3
      CreateDirectory $INI_DBINDEXDIR
      IfErrors "" +3
      MessageBox MB_ICONEXCLAMATION|MB_OK "Directory cannot be created.  Please specify another directory."
      Abort
    IfFileExists "$INI_DBQUEUEDIR\*.*" +6 ""
      MessageBox MB_YESNO|MB_ICONQUESTION "The DB Queue File Group Directory specified doesn't exist, create it?" IDNO +3
      CreateDirectory $INI_DBQUEUEDIR
      IfErrors "" +3
      MessageBox MB_ICONEXCLAMATION|MB_OK "Directory cannot be created.  Please specify another directory."
      Abort
    IfFileExists "$INI_DBSTATICDIR\*.*" +6 ""
      MessageBox MB_YESNO|MB_ICONQUESTION "The DB Static Data File Directory specified doesn't exist, create it?" IDNO +3
      CreateDirectory $INI_DBSTATICDIR
      IfErrors "" +3
      MessageBox MB_ICONEXCLAMATION|MB_OK "Directory cannot be created.  Please specify another directory."
      Abort
    IfFileExists "$INI_DBFILEDIR\${PRODUCT_DB_NAME}.mdf" "" +3
      MessageBox MB_OK|MB_ICONEXCLAMATION "The selected folder already contains a database file with the same name.  Please change the specified database name, remove the existing database/delete the existing database file, or select another folder."
      Abort
    IfFileExists "$INI_DBLOGDIR\${PRODUCT_DB_NAME}_log.ldf" "" continueDatabaseInstall
      MessageBox MB_OK|MB_ICONEXCLAMATION "The selected folder already contains a database log file with the same name.  Please change the specified database name, remove the existing database/delete the existing database log file, or select another folder."
      Abort
  remoteServer:
    MessageBox MB_ICONINFORMATION|MB_OKCANCEL "Ensure that the database folder(s) specified on this dialog exist on the remote server before continuing.  Database creation will fail if the folder(s) does not exist.$\n$\nHit Cancel to correct the path(s) specified." IDOK continueDatabaseInstall
    Abort
  continueDatabaseInstall:
FunctionEnd

Function PageFileSystem
  SectionGetFlags ${GRPDATAINI} $0
  # Do a binary AND of $0 and SF_SELECTED and put results in $0
  IntOp $0 $0 & ${SF_SELECTED}
  IntCmp $0 ${SF_SELECTED} +2
    Return
  # For Ticket #1769: Since windows has a 255 char path length limit and our path to the DICOM
  # Objects can exceed that the suggested filesystem path is made to be as short as possible
  # The following will suggest a folder, "FS", on the root of the installation directory.

  ${GetRoot} "$INSTDIR" $0

  !insertmacro MUI_INSTALLOPTIONS_WRITE "PageFileSystem.ini" "Field 5" "State" "$0\FS"
  !insertmacro MUI_HEADER_TEXT "$(PageFileSystem_TITLE)" "$(PageFileSystem_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageFileSystem.ini"
FunctionEnd

Function ValidatePageFileSystem
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_FSDESC "PageFileSystem.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_FSDIR "PageFileSystem.ini" "Field 5" "State"
  StrCmp $INI_FSDESC "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Filesystem Description cannot be blank. Please enter a description."
  Abort
  IfFileExists "$INI_FSDIR\*.*" +6 0
    ClearErrors
    CreateDirectory $INI_FSDIR
    IfErrors 0 +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Directory cannot be created.  Please specify another directory."
    Abort
FunctionEnd

Function PagePartition
  SectionGetFlags ${GRPDATAINI} $0
  # Do a binary AND of $0 and SF_SELECTED and put results in $0
  IntOp $0 $0 & ${SF_SELECTED}
  IntCmp $0 ${SF_SELECTED} +2
    Return
  !insertmacro MUI_HEADER_TEXT "$(PagePartition_TITLE)" "$(PagePartition_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PagePartition.ini"
FunctionEnd

Function ValidatePagePartition
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_AETITLE "PagePartition.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_PARTITIONDESC "PagePartition.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_PARTITIONFOLDER "PagePartition.ini" "Field 7" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_PARTITIONPORT "PagePartition.ini" "Field 9" "State"
  StrCmp $INI_AETITLE "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Partition AE Title cannot be blank. Please enter an AE Title."
  Abort
  StrCmp $INI_PARTITIONDESC "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Partition Description cannot be blank. Please enter a description"
  Abort
  IfFileExists "$INI_FSDIR\$INI_PARTITIONFOLDER\*.*" +5 ""
    CreateDirectory $INI_FSDIR\$INI_PARTITIONFOLDER
    IfErrors "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Folder cannot be created.  Please specify another folder name or go back and specify another *Filesystem* directory ."
    Abort
  StrCmp $INI_PARTITIONPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Port cannot be blank. Please enter a port."
  Abort
FunctionEnd


Function PageEnterpriseServer
  ${IfThen} ${ENTERPRISEMODE} == False ${|} Return ${|}

  !insertmacro MUI_HEADER_TEXT "$(PageEnterpriseServer_TITLE)" "$(PageEnterpriseServer_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageEnterpriseServer.ini"
FunctionEnd

Function ValidatePageEnterpriseServer
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESHOST "PageEnterpriseServer.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESPORT "PageEnterpriseServer.ini" "Field 5" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESUSER "PageEnterpriseServer.ini" "Field 7" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_ESPASS "PageEnterpriseServer.ini" "Field 9" "State"
  StrCmp $INI_ESHOST "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Server hostname/ip cannot be blank. Please a proper value."
  Abort
  StrCmp $INI_ESPORT "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Server Port cannot be blank. Please enter a port."
  Abort
  StrCmp $INI_ESUSER "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise Username cannot be blank. Please enter a Username."
  Abort
  StrCmp $INI_ESPASS "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Enterprise User Password cannot be blank. Please enter a Password."
  Abort
FunctionEnd


Function PageAdminUser
  ${IfThen} ${ENTERPRISEMODE} == True ${|} Return ${|}

  !insertmacro MUI_HEADER_TEXT "$(PageAdminUser_TITLE)" "$(PageAdminUser_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageAdminUser.ini"
FunctionEnd

Function ValidatePageAdminUser
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_STANDALONEADMIN "PageAdminUser.ini" "Field 3" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_STANDALONEPASS "PageAdminUser.ini" "Field 5" "State"
  StrCmp $INI_STANDALONEADMIN  "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Administrator username cannot be left blank."
  Abort
  StrCmp $INI_STANDALONEPASS "" "" +3
  MessageBox MB_ICONEXCLAMATION|MB_OK "Administrator password cannot be left blank."
  Abort
FunctionEnd


Function TestDbConnect
  Push $INI_HOSTINSTANCE
  Push "\"
  Push "\\"
  Call StrRep
  Pop "$R0"
  StrCpy $INI_2SLASHHOSTINSTANCE $R0

  FileOpen $0 "$TEMP\dbconnect.js" w
  FileWrite $0 "var connection = WScript.CreateObject($\"ADODB.connection$\");$\n"
  FileWrite $0 "connection.Provider = $\"sqloledb$\";$\n"
  FileWrite $0 "connection.Properties($\"Data Source$\").Value = $\"$INI_2SLASHHOSTINSTANCE$\";$\n"
  FileWrite $0 "connection.Properties($\"Initial Catalog$\").Value = $\"master$\";$\n"
  FileWrite $0 "try$\n"
  FileWrite $0 "{$\n"
  FileWrite $0 "connection.Open($\"$\", $\"$INI_ADMINID$\", $\"$INI_ADMINPASS$\");$\n"
  FileWrite $0 "}$\n"
  FileWrite $0 "catch(err)$\n"
  FileWrite $0 "{$\n"
  FileWrite $0 "WScript.Quit(1);$\n"
  FileWrite $0 "}$\n"
  FileWrite $0 "WScript.Quit(0);$\n"

  FileClose $0

  nsExec::ExecToStack '"cscript" "$TEMP\dbconnect.js"'
  ;Pop $0
  Delete "$TEMP\dbconnect.js"
  ;StrCmp $0 "error" errScriptEngineMissing
  ;StrCmp $0 "0" "" errConnectionTestFailed
FunctionEnd

Function DbExists
  FileOpen $0 "$TEMP\dbexists.js" w
  FileWrite $0 "var result = new ActiveXObject($\"ADODB.Recordset$\");$\n"
  FileWrite $0 "var connection = WScript.CreateObject($\"ADODB.connection$\");$\n"
  FileWrite $0 "connection.ConnectionString = $\"PROVIDER=SQLOLEDB.1;USER ID=$INI_ADMINID;PASSWORD=$INI_ADMINPASS;INITIAL CATALOG=master;DATA SOURCE=$INI_2SLASHHOSTINSTANCE$\"$\n"

  FileWrite $0 "connection.Open();$\n"

  FileWrite $0 "result = connection.execute($\"IF EXISTS (SELECT name FROM sys.databases WHERE name = N'${PRODUCT_DB_NAME}') select 1 as [test] ELSE select 0 as [test]$\");$\n"
  FileWrite $0 "if(result($\"test$\") == 0)$\n"
  FileWrite $0 "  WScript.Quit(0);$\n"
  FileWrite $0 "else$\n"
  FileWrite $0 "  WScript.Quit(1);$\n"

  FileClose $0

  nsExec::ExecToStack '"cscript" "$TEMP\dbexists.js"'
  ;Pop $0
  Delete "$TEMP\dbexists.js"
FunctionEnd

Function GetDbVersion
  #Depends on a variable $PRIOR_DB_VERSION
  Push $TEMP
  Push "\"
  Push "\\"
  Call StrRep
  Pop "$R0"
  StrCpy $R1 $R0

  FileOpen $0 "$TEMP\getdbversion.js" w
  FileWrite $0 "var result = new ActiveXObject($\"ADODB.Recordset$\");$\n"
  FileWrite $0 "var connection = WScript.CreateObject($\"ADODB.connection$\");$\n"
  FileWrite $0 "connection.ConnectionString = $\"PROVIDER=SQLOLEDB.1;USER ID=$INI_ADMINID;PASSWORD=$INI_ADMINPASS;INITIAL CATALOG=${PRODUCT_DB_NAME};DATA SOURCE=$INI_2SLASHHOSTINSTANCE$\"$\n"
  FileWrite $0 "connection.Open();$\n"
  FileWrite $0 "result = connection.execute($\"select [Major_] + '.' + [Minor_] + '.' + [Build_] + '.' + [Revision_] as [Version] from dbo.DatabaseVersion_$\");$\n"
  FileWrite $0 "var fso, tf;$\n"
  FileWrite $0 "fso = new ActiveXObject($\"Scripting.FileSystemObject$\");$\n"
  FileWrite $0 "tf = fso.CreateTextFile($\"$R1\\version.txt$\", true);$\n"
  FileWrite $0 "tf.Write(result($\"Version$\"));$\n"
  FileWrite $0 "tf.Close();$\n"
  FileWrite $0 "WScript.Quit(0);$\n"
  FileClose $0

  nsExec::ExecToStack '"cscript" "$TEMP\getdbversion.js"'
  Delete "$TEMP\getdbversion.js"

  FileOpen $1 "$TEMP\version.txt" r
  FileRead $1 $2
  FileClose $1

  Push $2

  Delete "$TEMP\version.txt"
FunctionEnd

Function ReplaceInCreateDB
	; save R1
	Push $R1
	Exch
	; A sequence of replacements.
        ; the string to replace in is at the top of the stack
	Push "++DB++" ; string to find
	Push ${PRODUCT_DB_NAME} ; string to replace it with
	Call StrRep ; see elsewhere in NSIS Wiki
        ; the string to replace in is at the top of the stack again
	Push "++DBFOLDER++" ; string to find
	Push $INI_DBFILEDIR ; string to replace it with
	Call StrRep
        Push "++LOGFOLDER++" ; string to find
	Push $INI_DBLOGDIR ; string to replace it with
	Call StrRep
        Push "++INDEXFOLDER++" ; string to find
	Push $INI_DBINDEXDIR ; string to replace it with
	Call StrRep
        Push "++QUEUEFOLDER++" ; string to find
	Push $INI_DBQUEUEDIR ; string to replace it with
	Call StrRep
        Push "++STATICFOLDER++" ; string to find
	Push $INI_DBSTATICDIR ; string to replace it with
	Call StrRep
        ; and so on
	; restore stack
	Exch
	Pop $R1
FunctionEnd

Function ReplaceInRemoveDB
	Push $R1
	Exch
	Push "++DB++"
	Push ${PRODUCT_DB_NAME}
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function ReplaceInDBJscript
	Push $R1
	Exch
	Push "++HOST++"
	Push $INI_2SLASHHOSTINSTANCE
	Call StrRep
	Push "++ADMINID++"
	Push $INI_ADMINID
	Call StrRep
        Push "++ADMINPASS++"
	Push $INI_ADMINPASS
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function CommentOutAdoNetAppender
	Push $R1
	Exch
	Push '<appender-ref ref="AdoNetAppender" />'
	Push '<!--<appender-ref ref="AdoNetAppender" />-->'
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function RestoreAdoNetAppender
	Push $R1
	Exch
	Push '<!--<appender-ref ref="AdoNetAppender" />-->'
	Push '<appender-ref ref="AdoNetAppender" />'
	Call StrRep
	Exch
	Pop $R1
FunctionEnd

Function UpdateTimeout
  ;Expects that timeout is pushed to stack prior to calling
  Exch $R1

  ${xml::LoadFile} "$INSTDIR\ClearCanvas.ImageServer.Executable.exe.config" $0
  ${xml::GotoPath} "/configuration/applicationSettings/ClearCanvas.ImageServer.Enterprise.SqlServer2005.SqlServerSettings" $0
  ${xml::FirstChildElement} "setting" $0 $1

  loopSetting:
    ${xml::GetAttribute} "name" $0 $1
    StrCmp "CommandTimeout" $0 foundSetting ;breaks loop

    ${xml::NextSiblingElement} "setting" $0 $1
    StrCmp $1 "0" loopSetting findFailed ;loops unless an error occurred

    foundSetting:
    ${xml::FirstChildElement} "value" $0 $1
    ${xml::SetText} "$R1" $0

    ${xml::SaveFile} "$INSTDIR\ClearCanvas.ImageServer.Executable.exe.config" $0
    ${xml::Unload}

  Pop $R1
  Push 0
  Return

  findFailed:
    MessageBox MB_OK "A failure has occurred increasing the timeout."
    Pop $R1
    Push -1
    Abort
FunctionEnd

; Function that will replace multiple patterns in file using callbacks
; taken from:
; http://nsis.sourceforge.net/Replace_multiple_patterns_in_file_using_callbacks
; Example Usage:
; Function ReplaceInSQL
;	; save R1
;	Push $R1
;	Exch
;	; A sequence of replacements.
;       ; the string to replace in is at the top of the stack
;	Push "@@foo@@" ; string to find
;	Push "bar" ; string to replace it with
;	Call StrReplace ; see elsewhere in NSIS Wiki
;       ; the string to replace in is at the top of the stack again
;	Push "@@tellytubby@@" ; string to find
;	Push "againagain" ; string to replace it with
;	Call StrReplace
;       ; and so on
;	; restore stack
;	Exch
;	Pop $R1
; FunctionEnd

Function ReplaceInFile
	Exch $R0 ;file name to search in
	Exch
	Exch $R4 ;callback function handle
	Push $R1 ;file handle
	Push $R2 ;temp file name
	Push $R3 ;temp file handle
	Push $R5 ;line read

	GetTempFileName $R2
  	FileOpen $R1 $R0 r ;file to search in
  	FileOpen $R3 $R2 w ;temp file

loop_read:
 	ClearErrors
 	FileRead $R1 $R5 ;read line
 	Push $R5 ; put line on stack
 	Call $R4
 	Pop $R5 ; read line from stack
 	IfErrors exit
 	FileWrite $R3 $R5 ;write modified line
	Goto loop_read
exit:
  	FileClose $R1
  	FileClose $R3

   	SetDetailsPrint none
  	Delete $R0
  	Rename $R2 $R0
  	Delete $R2
   	SetDetailsPrint both

	; pop in reverse order
	Pop $R5
	Pop $R3
	Pop $R2
	Pop $R1
	Pop $R4
	Pop $R0
FunctionEnd

; Taken from http://nsis.sourceforge.net/Another_String_Replace_%28and_Slash/BackSlash_Converter%29
Function StrRep
  Exch $R4 ; $R4 = Replacement String
  Exch
  Exch $R3 ; $R3 = String to replace (needle)
  Exch 2
  Exch $R1 ; $R1 = String to do replacement in (haystack)
  Push $R2 ; Replaced haystack
  Push $R5 ; Len (needle)
  Push $R6 ; len (haystack)
  Push $R7 ; Scratch reg
  StrCpy $R2 ""
  StrLen $R5 $R3
  StrLen $R6 $R1
loop:
  StrCpy $R7 $R1 $R5
  StrCmp $R7 $R3 found
  StrCpy $R7 $R1 1 ; - optimization can be removed if U know len needle=1
  StrCpy $R2 "$R2$R7"
  StrCpy $R1 $R1 $R6 1
  StrCmp $R1 "" done loop
found:
  StrCpy $R2 "$R2$R4"
  StrCpy $R1 $R1 $R6 $R5
  StrCmp $R1 "" done loop
done:
  StrCpy $R3 $R2
  Pop $R7
  Pop $R6
  Pop $R5
  Pop $R2
  Pop $R1
  Pop $R4
  Exch $R3
FunctionEnd

Function un.RemoveDB
  IfSilent +1 nonSilent
    StrCmp $INI_REMOVEDB "True" remove doNotRemove

nonSilent:
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Remove the Image Server database during uninstall?$\n$\nWarning: once the database is removed it cannot be restored.  It can however always be removed at a later time." IDNO +3

remove:
  DetailPrint "Removing database..."
  ;using the jscript method here because it already contains the connection details
  nsExec::ExecToLog '"cscript" "$INSTDIR\scripts\dbgo.js" "$INSTDIR\scripts\TemplateImageServerRemoveDatabase.sql"'

doNotRemove:
FunctionEnd

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer."
FunctionEnd

Function un.onInit
  ;For Silent Install
  ${un.GetParameters} $R0
  ${un.GetOptions} $R0 /REMOVEDB= $INI_REMOVEDB

  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Section Uninstall
  SetShellVarContext all

  !undef UN
  !define UN "un."

  IfFileExists "$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe" 0 +2
  Call un.RemoveService
  IfFileExists $INSTDIR\scripts 0 +2
    Call un.RemoveDB
  IfFileExists $INSTDIR\web 0 +3
    StrCpy $VDIRNAME "${PRODUCT_VDIR_NAME}"
    Call un.DeleteVDir
  Delete "$INSTDIR\${PRODUCT_NAME}.url"
  Delete "$INSTDIR\uninst.exe"
  Delete "$INSTDIR\License.rtf"
  Delete "$INSTDIR\Logging.config"
  Delete "$INSTDIR\InstallServerCert.bat"
  Delete "$INSTDIR\SetupCertificates.Readme.txt"
  Delete "$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe.config"
  Delete "$INSTDIR\ClearCanvas.ImageServer.ShredHostService.exe"
  Delete "$INSTDIR\ClearCanvas.ImageServer.Executable.exe.config"
  Delete "$INSTDIR\ClearCanvas.ImageServer.Executable.exe"
  Delete "$INSTDIR\CCImageServerUsersGuide.chm"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Users Guide.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\ClearCanvas Website.lnk"
  Delete "${PRODUCT_STARTMENU_FOLDER}\Uninstall ${PRODUCT_SHORTCUT_NAME}.lnk"

  RMDir "${PRODUCT_STARTMENU_FOLDER}"
  RMDir /r "$INSTDIR\web"
  RMDir /r "$INSTDIR\scripts"
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\common"
  RMDir /r "$INSTDIR\utilities"
  RMDir /r "$INSTDIR\ReferenceDatabaseUpgradeScripts"
  RMDir "$INSTDIR"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  SetAutoClose true

  StrCpy $0 "$INSTDIR\uninstall.log"
  Push $0
  Call un.DumpLog

SectionEnd
