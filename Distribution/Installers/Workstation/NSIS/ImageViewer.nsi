; Script generated by the HM NIS Edit Script Wizard.

; defines required for upgrade process
; the '1 ##VERSION string is used by the build script as a token
!define MAJOR_VERSION 1 ##MAJOR
!define MINOR_VERSION 1 ##MINOR
!define BUILD 1 ##BUILDNUMBER
!define REVISION 1 ##REVISIONNUMBER

; define for build process
; the "ImageViewer" ##VERSION string is used by the build script as a token
!define DISTRIBUTION "ImageViewer" ##DISTRIBUTION

; HM NIS Edit Wizard helper defines
!define PRODUCT_NAME "ClearCanvas Workstation"
!define PRODUCT_PUBLISHER "ClearCanvas Inc"
!define PRODUCT_WEB_SITE "http://www.clearcanvas.ca"
!define PRODUCT_DIR_REGKEY "Software\Microsoft\Windows\CurrentVersion\App Paths\ClearCanvas.Desktop.Executable.exe"
!define PRODUCT_UNINST_KEY "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}"
!define PRODUCT_UNINST_ROOT_KEY "HKLM"
!define PRODUCT_VERSION "${MAJOR_VERSION}.${MINOR_VERSION}"
!define NSISINCLUDES "..\..\NSISIncludes"

; MUI 1.67 compatible ------
!include "dotNETCC.nsh"
!include "${NSISIncludes}\DumpLog.nsh"
!include "${NSISIncludes}\FileFunc.nsh"
!include "${NSISIncludes}\LogicLib.nsh"
!include "${NSISIncludes}\MUI.nsh"
!include "${NSISIncludes}\RemoveService.nsh"
!include "${NSISIncludes}\servicelib.nsh"
!include "${NSISIncludes}\StrFunc.nsh"
!include "${NSISIncludes}\XML.nsh"



;Macros
!insertmacro GetParameters
!insertmacro GetOptions
!insertmacro un.GetParameters
!insertmacro un.GetOptions

; MUI Settings
!define MUI_ABORTWARNING
!define MUI_ICON "${NSISDIR}\Contrib\Graphics\Icons\modern-install.ico"
!define MUI_UNICON "${NSISDIR}\Contrib\Graphics\Icons\modern-uninstall.ico"

; Platform-specific Settings (x86 vs. x64)
!ifdef PLATFORM_X64
!define PLATFORM_NAME "x64"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES64
!define PLATFORM_SUBFOLDER "x64"
!define PLATFORM_VC2008 "{350AA351-21FA-3270-8B7A-835434E766AD}"
!define PLATFORM_VC2008SP1 "{8220EEFE-38CD-377E-8595-13398D740ACE}"
!else
!define PLATFORM_X64 "false"
!define PLATFORM_NAME "x86"
!define PLATFORM_PROGRAMFILES $PROGRAMFILES
!define PLATFORM_SUBFOLDER ""
!define PLATFORM_VC2008 "{FF66E9F6-83E7-3A3E-AF14-8DE9A809A6A4}"
!define PLATFORM_VC2008SP1 "{9A25302D-30C0-39D9-BD6F-21E6EC160475}"
!endif

; Language Selection Dialog Settings
!define MUI_LANGDLL_REGISTRY_ROOT "${PRODUCT_UNINST_ROOT_KEY}"
!define MUI_LANGDLL_REGISTRY_KEY "${PRODUCT_UNINST_KEY}"
!define MUI_LANGDLL_REGISTRY_VALUENAME "NSIS:Language"

; Check for .NET Framework defines
!define DOTNET_VERSION_REQ "3"

; Variables
Var OLDINSTALLDIR
Var RESTOREDICOMAESERVERS
;LocalDataStoreServiceSettings
Var OLDFILESTOREPATH ;used to store filestore path
Var OLDBADFILEPATH ;used to store filestore path
;DicomServerSettings
Var OLDAETITLE
Var OLDPORT
Var OLDINTERIMPATH ;used to store filestore path
;DiskspaceManagerSettings
Var OLDLOWWATERMARK
Var OLDHIGHWATERMARK
Var OLDCHECKINTERVAL
Var OLDENFORCESTUDYLIMIT
Var OLDSTUDYLIMIT
Var OLDMINSTUDYLIMIT
Var OLDMAXSTUDYLIMIT
; Collected in PageFilestorePath.ini
Var INI_FILESTOREPATH
Var INI_BADFILEPATH
Var INI_INTERIMPATH
; Collected in PageDicomServerSettings.ini
Var INI_AETITLE
Var INI_PORT
; Only For Silent Install case
Var INI_AEPREFIX

;First call required to initialize
  ${StrCase}

; Welcome page
!insertmacro MUI_PAGE_WELCOME
; License page
!insertmacro MUI_PAGE_LICENSE "..\..\..\..\Docs\ImageViewer\EULA.rtf"
; Directory page
!insertmacro MUI_PAGE_DIRECTORY
; Custom page - Retrieves Dicom Server Settings
Page custom PageDicomServerSettings ValidatePageDicomServerSettings
; Custom page - Retrieves Filestore Path
Page custom PageFilestorePath ValidatePageFilestorePath
; Instfiles page
!insertmacro MUI_PAGE_INSTFILES
; Install Service
Section "ShreadHostServiceInstall" SEC00
  !insertmacro SERVICE "create" "ClearCanvas Shred Host Service" \
  "path=$INSTDIR\ClearCanvas.Server.ShredHostService.exe -service;autostart=1;display=ClearCanvas Shred Host Service;"

  ;Sets description
  WriteRegStr HKLM \
  "SYSTEM\CurrentControlSet\Services\ClearCanvas Shred Host Service" \
  "Description" "Hosts the ClearCanvas Server Threads (Shreds)."

SectionEnd
; Finish page
!define MUI_FINISHPAGE_RUN "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
!insertmacro MUI_PAGE_FINISH

; Uninstaller pages
!insertmacro MUI_UNPAGE_INSTFILES

; Language files
!insertmacro MUI_LANGUAGE "English"
!insertmacro MUI_LANGUAGE "French"
!insertmacro MUI_LANGUAGE "German"
!insertmacro MUI_LANGUAGE "Italian"
!insertmacro MUI_LANGUAGE "Japanese"
!insertmacro MUI_LANGUAGE "Russian"
!insertmacro MUI_LANGUAGE "Spanish"
!insertmacro MUI_LANGUAGE "SimpChinese"
!insertmacro MUI_LANGUAGE "TradChinese"

; MUI end ------

Name "${PRODUCT_NAME} ${PRODUCT_VERSION}"
OutFile "ClearCanvas Workstation.exe"
InstallDir "${PLATFORM_PROGRAMFILES}\ClearCanvas\${PRODUCT_NAME}"
InstallDirRegKey HKLM "${PRODUCT_DIR_REGKEY}" ""
ShowInstDetails show
ShowUnInstDetails show

Function .onInit
  ; Check for Platform compared to installer platform
  GetVersion::WindowsPlatformArchitecture
   Pop $R0
  ${If} $R0 == "32"
  ${AndIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 64-bit version of ${PRODUCT_NAME} cannot be installed on a 32-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${ElseIf} $R0 == "64"
  ${AndIf} ${PLATFORM_NAME} == "x86"
    MessageBox MB_OK|MB_ICONSTOP "A platform mismatch has been detected.$\n$\nThe 32-bit version of ${PRODUCT_NAME} cannot be installed on a 64-bit Operating System.  Installation will now be aborted." /SD IDOK
    Abort
  ${EndIf}
  
  ; Check for Windows Version
  ; using WindowsName instead of WindowsVersion because of difficulties encountered in performing
  ; numerical comparisons on version numbers.
  GetVersion::WindowsName
   Pop $R0
   ${If} $R0 == "95 OSR2"
   ${OrIf} $R0 == "95"
   ${OrIf} $R0 == "98 SE"
   ${OrIf} $R0 == "98"
   ${OrIf} $R0 == "ME"
   ${OrIf} $R0 == "NT"
   ${OrIf} $R0 == "CE"
   ${OrIf} $R0 == "2000"
     MessageBox MB_OK "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted." /SD IDOK
     Abort "${PRODUCT_NAME} requires Windows XP or greater.  The install has aborted."
   ${EndIf}

  ; Check for .NET Framework Install
  ; discovered an unexpected formatting idiosyncrasy for the version string passed into CheckDotNet
  ; e.g. if the req'd version is 3.0.1 or higher but installed version is 3.0.04502.0
  ; using 3.0.1 or 3.0.10... 3.0.1000 doesn't work.  Have to specify 3.0.10000 or a greater number of zeroes
  !insertmacro CheckDotNET "${DOTNET_VERSION_REQ}"
  
  ; Check for prior or conflicting versionsand prompt to uninstall them before continuing
  StrCpy $RESTOREDICOMAESERVERS "False"
  Call HandlePriorInstall

  ; Language Selection
  !insertmacro MUI_LANGDLL_DISPLAY
  
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageFilestorePath.ini"
  !insertmacro MUI_INSTALLOPTIONS_EXTRACT "PageDicomServerSettings.ini"
  
  ;For Silent Install
  ${GetParameters} $R0
  ClearErrors
  ${GetOptions} $R0 /PREFIX= $INI_AEPREFIX ;Set to blank if not specified
  ${GetOptions} $R0 /AE= $INI_AETITLE ;Set to hostname if not specified
  ${GetOptions} $R0 /P= $INI_PORT ;Set to app.config default if not specified
  ${GetOptions} $R0 /FP= $INI_FILESTOREPATH ;Set to app.config default if not specified
  ${GetOptions} $R0 /BP= $INI_BADFILEPATH ;Set to app.config default if not specified
  ${GetOptions} $R0 /INP= $INI_INTERIMPATH ;Set to app.config default if not specified
  ##End of Silent Install Specific Section
FunctionEnd

Section "installdir"
  SetShellVarContext all
  SetOutPath "$INSTDIR"
  SetOverwrite ifnewer
  File /r /x *.svn* "..\..\..\Build\${DISTRIBUTION}\${PLATFORM_SUBFOLDER}\Release\*.*"
  
  ${If} $RESTOREDICOMAESERVERS == "True"
    CopyFiles /SILENT "$TEMP\DicomAEServers.xml" "$INSTDIR"
    Delete "$TEMP\DicomAEServers.xml"
  ${EndIf}
  
  CreateDirectory "$SMPROGRAMS\ClearCanvas"
  CreateShortCut "$SMPROGRAMS\ClearCanvas\ClearCanvas Workstation.lnk" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
  CreateShortCut "$DESKTOP\ClearCanvas Workstation.lnk" "$INSTDIR\ClearCanvas.Desktop.Executable.exe"
SectionEnd

Section "Folders"
  CreateDirectory "$INSTDIR\badfiles"
  CreateDirectory "$INSTDIR\dicom_interim"
SectionEnd

Section "MigrationAndConfigurationSetting"
  IfSilent +1 bothSilentAndNonSilentConfig
    ;Fetches machine's hostname to be used as the AE Title
    ${IfThen} "$INI_AETITLE" == "" ${|} ReadRegStr $INI_AETITLE HKLM "System\CurrentControlSet\Services\Tcpip\Parameters" "Hostname" ${|}

    ;Adds Prefix if it was specified
    StrCpy $INI_AETITLE "$INI_AEPREFIX$INI_AETITLE"
    
    ;Handle Case where AE Title Exceeds 16 chars
    StrCpy $INI_AETITLE $INI_AETITLE 16

    ;All Uppercase is desired
    ${StrCase} $INI_AETITLE "$INI_AETITLE" "U"

  ##End of SilentOnly Section
  
bothSilentAndNonSilentConfig:
  StrCmp $OLDINSTALLDIR "" +1 migration
  ##No prior installation detected
  ${xml::LoadFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
  ${xml::GotoPath} "/configuration/LocalDataStoreServiceSettings" $0
  ${IfNotThen} "$INI_FILESTOREPATH" == "" ${|} ${xml::SetAttribute} "StorageDirectory" "$INI_FILESTOREPATH" $0 ${|}
  ${IfNotThen} "$INI_BADFILEPATH" == "" ${|} ${xml::SetAttribute} "BadFileDirectory" "$INI_BADFILEPATH" $0 ${|}
  ${xml::GotoPath} "/configuration/DicomServerSettings" $0
  ${xml::SetAttribute} "AETitle" "$INI_AETITLE" $0
  ${IfNotThen} "$INI_PORT" == "" ${|} ${xml::SetAttribute} "Port" "$INI_PORT" $0 ${|}
  ${IfNotThen} "$INI_INTERIMPATH" == "" ${|} ${xml::SetAttribute} "InterimStorageDirectory" "$INI_INTERIMPATH" $0 ${|}
  ${xml::SaveFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
  ${xml::Unload}
  Return
  
  migration:
  ##First checks to see if the two paths happen to be the same

  ;relative path case with leading dot backslash
  StrCpy $R0 $OLDFILESTOREPATH "" 2 ;Removes the leading dot backslash
  StrCmp $OLDINSTALLDIR$R0 $INSTDIR\filestore sameOldAndNewPaths

  ;absolute path case
  StrCmp $OLDFILESTOREPATH $INSTDIR\filestore sameOldAndNewPaths
  
  ##Determines if filestore path has been customized
  ;StrCmp $OLDFILESTOREPATH ".\filestore" handleDefaultFilestoreDir handleCustomFilestoreDir
  ${If} $OLDFILESTOREPATH == ".\filestore"
    goto handleDefaultFilestoreDir
  ${ElseIf} $OLDFILESTOREPATH == "$INSTDIR\filestore"
    goto handleDefaultFilestoreDir
  ${Else}
    goto handleCustomFilestoreDir
  ${EndIf}



  sameOldAndNewPaths:
  DetailPrint "Keeping AE Title and Port..."
  ${xml::LoadFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
  ${xml::GotoPath} "/configuration/DicomServerSettings" $0
  ${xml::SetAttribute} "AETitle" "$OLDAETITLE" $0
  ${xml::SetAttribute} "Port" "$OLDPORT" $0
  ${xml::GotoPath} "/configuration/DiskspaceManagerSettings" $0
  ${xml::SetAttribute} "LowWatermark" "$OLDLOWWATERMARK" $0
  ${xml::SetAttribute} "HighWatermark" "$OLDHIGHWATERMARK" $0
  ${xml::SetAttribute} "CheckFrequency" "$OLDCHECKINTERVAL" $0
  ; Prior to 1.5 these settings did not exist
  ${If} "$OLDENFORCESTUDYLIMIT" != ""
    ${xml::SetAttribute} "EnforceStudyLimit" "$OLDENFORCESTUDYLIMIT" $0
    ${xml::SetAttribute} "StudyLimit" "$OLDSTUDYLIMIT" $0
    ${xml::SetAttribute} "MinStudyLimit" "$OLDMINSTUDYLIMIT" $0
    ${xml::SetAttribute} "MaxStudyLimit" "$OLDMAXSTUDYLIMIT" $0
  ${EndIf}
  ${xml::SaveFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
  ${xml::Unload}
  Return
  
  
  handleDefaultFilestoreDir:
  ;confirm that the new installdir is on the same drive otherwise move may take a long time
  StrCpy $R1 $INSTDIR 1
  StrCpy $R2 $OLDINSTALLDIR 1
  StrCmp $R1 $R2 +1 oldAndNewOnDifferentDrives

  DetailPrint "Migrating data from prior installation, this may take some time..."
  DetailPrint "Moving data from $OLDINSTALLDIR$R0 to $INSTDIR\filestore."

  ReadEnvStr $R5 COMSPEC
  nsExec::ExecToLog '"$R5" /C move "$OLDINSTALLDIR$R0" "$INSTDIR\filestore"'
  Return


  oldAndNewOnDifferentDrives:
  DetailPrint "Old data is on a different drive from specified installation directory.  Data move may take too long."
  Goto handleCustomFilestoreDir 
  Return

  
  ##Sets new filestorepath to the old filestore path
  handleCustomFilestoreDir:
  StrCpy $R3 $OLDFILESTOREPATH 1
  StrCmp $R3 "." oldRelativePath oldAbsolutePath
  
  oldRelativePath:
  StrCpy $R4 $OLDINSTALLDIR$OLDFILESTOREPATH
  StrCpy $R5 $OLDINSTALLDIR$OLDBADFILEPATH
  StrCpy $R6 $OLDINSTALLDIR$OLDINTERIMPATH
  Goto updateNewConfigFile

  oldAbsolutePath:
  StrCpy $R4 $OLDFILESTOREPATH
  StrCpy $R5 $OLDBADFILEPATH
  StrCpy $R6 $OLDINTERIMPATH
  Goto updateNewConfigFile
  
  
  
  updateNewConfigFile: 
  DetailPrint "Changing filestore path to use the prior installations filestore path..."
  ${xml::LoadFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
  ${xml::GotoPath} "/configuration/LocalDataStoreServiceSettings" $0
  ${xml::SetAttribute} "StorageDirectory" "$R4" $0
  ${xml::SetAttribute} "BadFileDirectory" "$R5" $0
  ${xml::GotoPath} "/configuration/DicomServerSettings" $0
  ${xml::SetAttribute} "InterimStorageDirectory" "$R6" $0
  ${xml::SetAttribute} "AETitle" "$OLDAETITLE" $0
  ${xml::SetAttribute} "Port" "$OLDPORT" $0
  ${xml::GotoPath} "/configuration/DiskspaceManagerSettings" $0
  ${xml::SetAttribute} "LowWatermark" "$OLDLOWWATERMARK" $0
  ${xml::SetAttribute} "HighWatermark" "$OLDHIGHWATERMARK" $0
  ${xml::SetAttribute} "CheckFrequency" "$OLDCHECKINTERVAL" $0
  ; Prior to 1.5 these settings did not exist
  ${If} "$OLDENFORCESTUDYLIMIT" != ""
    ${xml::SetAttribute} "EnforceStudyLimit" "$OLDENFORCESTUDYLIMIT" $0
    ${xml::SetAttribute} "StudyLimit" "$OLDSTUDYLIMIT" $0
    ${xml::SetAttribute} "MinStudyLimit" "$OLDMINSTUDYLIMIT" $0
    ${xml::SetAttribute} "MaxStudyLimit" "$OLDMAXSTUDYLIMIT" $0
  ${EndIf}
  ${xml::SaveFile} "$INSTDIR\ClearCanvas.Server.ShredHostService.exe.config" $0
  ${xml::Unload}
  
  CreateDirectory "$INSTDIR\filestore"
  Return
  
SectionEnd

Section "Permissions"
  AccessControl::GrantOnFile "$INSTDIR" "Users" "GenericRead + GenericWrite + GenericExecute + Delete"
SectionEnd

Section "-C Runtime Install"
    SectionIn RO
    # Visual C++ 2008
    ;Checks if it's already installed and skips if it is
    ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008}" "Version"
    ${IfNotThen} "$0" == "" ${|} goto sp1 ${|}

    Push $0
    SetOutPath "$TEMP"
    File "..\..\..\Redistributables\Visual C++ 2008\vcredist_${PLATFORM_NAME}.exe"
    DetailPrint "Pausing installation while runtime components of Visual C++ 2008 Libraries are installed."

    IfSilent silentruntime normalruntime

    silentruntime:
    ExecWait '$TEMP\Vcredist_${PLATFORM_NAME}.exe /q:a /c:"msiexec /i vcredist.msi /qn /l*v %temp%\vcredist_${PLATFORM_NAME}.log"' $0
    goto checkruntime

    normalruntime:
    ExecWait '$TEMP\vcredist_${PLATFORM_NAME}.exe /Q' $0
    goto checkruntime

    checkruntime:
    ${If} $0 != 0
      MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 is installed.  Please manually perform the install of the Microsoft Visual C++ 2008 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
    ${EndIf}

    sp1:
    # Visual C++ 2008 SP1
    ;Checks if it's already installed and skips if it is
    ReadRegDword $0 HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PLATFORM_VC2008SP1}" "Version"
    ${IfNotThen} "$0" == "" ${|} Return ${|}

    Push $0
    SetOutPath "$TEMP"
    File "..\..\..\Redistributables\Visual C++ 2008 SP1\vcredist_${PLATFORM_NAME}.exe"
    DetailPrint "Pausing installation while runtime components of Visual C++ 2008 SP1 Libraries are installed."

    IfSilent silentruntimesp1 normalruntimesp1

    silentruntimesp1:
    ExecWait '$TEMP\Vcredist_${PLATFORM_NAME}.exe /q:a /c:"msiexec /i vcredist.msi /qn /l*v %temp%\vcredist_${PLATFORM_NAME}.log"' $0
    goto checkruntime

    normalruntimesp1:
    ExecWait '$TEMP\vcredist_${PLATFORM_NAME}.exe /Q' $0
    goto checkruntimesp1

    checkruntimesp1:
    ${If} $0 != 0
      MessageBox MB_OK "The installation of the runtime components of Visual C++ 2008 SP1 Libraries has failed.  ${PRODUCT_NAME} requires that Visual C++ 2008 SP1 is installed..  Please manually perform the install of the Microsoft Visual C++ 2008 SP1 Redistributable Package from Micosoft's Website before using ${PRODUCT_NAME}." /SD IDOK
    ${EndIf}
SectionEnd


Section "Register File Association"
  DetailPrint "Registering File Association..."
  WriteRegStr HKCR ".dcm" "" "ClearCanvas.ImageViewer"
  WriteRegDword HKCR "ClearCanvas.ImageViewer" "EditFlags" "0"
  WriteRegDword HKCR "ClearCanvas.ImageViewer" "BrowserFlags" "8"
  WriteRegStr HKCR "ClearCanvas.ImageViewer\DefaultIcon" "" "$INSTDIR\ClearCanvas.Desktop.Executable.exe,0"
  WriteRegStr HKCR "ClearCanvas.ImageViewer\shell" "" "Open"
  WriteRegStr HKCR "ClearCanvas.ImageViewer\shell\Open\command" "" '$INSTDIR\ClearCanvas.Desktop.Executable.exe Desktop.Application "%1"'
  WriteRegStr HKCR "ClearCanvas.ImageViewer\shell\Open\ddeexec\Application" "" "ClearCanvas.Desktop.Executable"
  WriteRegStr HKCR "ClearCanvas.ImageViewer\shell\Open\ddeexec\Topic" "" "System"

  ;A full absolute path is required once file association is implemented to the datastore
  ${xml::LoadFile} "$INSTDIR\ClearCanvas.Dicom.DataStore.cfg.xml" $0
  ${xml::GotoPath} "/hibernate-configuration/session-factory" $0
  ${xml::FirstChildElement} "property" $0 $1

  loopDatastorePath:
  ${xml::GetAttribute} "name" $0 $1
  StrCmp "connection.connection_string" $0 foundDatastorePath ;breaks loop

  ${xml::NextSiblingElement} "property" $0 $1
  StrCmp $1 "0" loopDatastorePath findFailed ;loops unless an error occurred

  foundDatastorePath:
  ${xml::SetText} "Data Source=$INSTDIR\dicom_datastore\viewer.sdf" $0
    
  ${xml::SaveFile} "$INSTDIR\ClearCanvas.Dicom.DataStore.cfg.xml" $0
  ${xml::Unload}
  Return

  findFailed:
    MessageBox MB_OK "A failure has occurred on datastore path configuration." /SD IDOK
    Return
SectionEnd

Section "Start Service"
  !insertmacro SERVICE "installed" "ClearCanvas Shred Host Service" "action=start;"
SectionEnd

Section -AdditionalIcons
  SetOutPath $INSTDIR
  WriteIniStr "$INSTDIR\${PRODUCT_NAME}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateShortCut "$SMPROGRAMS\ClearCanvas\Website.lnk" "$INSTDIR\${PRODUCT_NAME}.url"
SectionEnd

Section -Post
  WriteUninstaller "$INSTDIR\uninst.exe"
  WriteRegStr HKLM "${PRODUCT_DIR_REGKEY}" "" "$INSTDIR\ClearCanvas.Utilities.RebuildDatabase.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "UninstallString" "$INSTDIR\uninst.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "$INSTDIR\ClearCanvas.Utilities.RebuildDatabase.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayVersion" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  
  StrCpy $0 "$INSTDIR\install.log"
  Push $0
  Call DumpLog
SectionEnd

Function HandlePriorInstall
  ## Test for existence using the UninstallString
  ReadRegStr $R0 HKLM \
  "Software\Microsoft\Windows\CurrentVersion\Uninstall\${PRODUCT_NAME}" \
  "UninstallString"
  StrCmp $R0 "" noPriorInstall

  ## Get file version
  ;Making use of the Uninstall path to build the path to the exe
  StrCpy $R1 $R0 -10
  GetDllVersion "$R1ClearCanvas.Desktop.Executable.exe" $R2 $R3
  IntOp $R4 $R2 / 0x00010000
  IntOp $R5 $R2 & 0x0000FFFF
  IntOp $R6 $R3 / 0x00010000
  IntOp $R7 $R3 & 0x0000FFFF
  ;StrCpy $R3 "$R4.$R5.$R6.$R7"

  IntCmp ${MAJOR_VERSION} $R4 +1 installedVersionHigher installedVersionLower
  IntCmp ${MINOR_VERSION} $R5 +1 installedVersionHigher installedVersionLower
  IntCmp ${BUILD} $R6 +1 installedVersionHigher installedVersionLower
  IntCmp ${REVISION} $R7 sameVersionInstalled installedVersionHigher installedVersionLower


  installedVersionHigher:
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that a NEWER version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}." /SD IDOK
  Abort
  
  sameVersionInstalled:
  MessageBox MB_OK|MB_ICONSTOP \
  "The Installer has detected that the SAME version of ${PRODUCT_NAME} is already installed. $\n$\nTo continue with this installation please first uninstall ${PRODUCT_NAME}." /SD IDOK
  Abort
  
  installedVersionLower:
  MessageBox MB_OKCANCEL|MB_ICONEXCLAMATION \
  "Installer has detected that an older ${PRODUCT_NAME} version is already installed. $\n$\nClick `OK` to proceed with removing this version or `Cancel` to cancel this upgrade." /SD IDOK \
  IDOK beginUninstall 
  Abort

  ;Run the uninstaller
  beginUninstall:
  ;Fetch old settings
  StrCpy $OLDINSTALLDIR $R1
  ${xml::LoadFile} "$R1ClearCanvas.Server.ShredHostService.exe.config" $0
  ${xml::GotoPath} "/configuration/LocalDataStoreServiceSettings" $0
  ${xml::GetAttribute} "StorageDirectory" $OLDFILESTOREPATH $1
  ${xml::GetAttribute} "BadFileDirectory" $OLDBADFILEPATH $1
  ${xml::GotoPath} "/configuration/DicomServerSettings" $0
  ${xml::GetAttribute} "AETitle" $OLDAETITLE $1
  ${xml::GetAttribute} "Port" $OLDPORT $1
  ${xml::GetAttribute} "InterimStorageDirectory" $OLDINTERIMPATH $1
  ${xml::GotoPath} "/configuration/DiskspaceManagerSettings" $0
  ${xml::GetAttribute} "LowWatermark" $OLDLOWWATERMARK $1
  ${xml::GetAttribute} "HighWatermark" $OLDHIGHWATERMARK $1
  ${xml::GetAttribute} "CheckFrequency" $OLDCHECKINTERVAL $1
  ${xml::GetAttribute} "EnforceStudyLimit" $OLDENFORCESTUDYLIMIT $1
  ${xml::GetAttribute} "StudyLimit" $OLDSTUDYLIMIT $1
  ${xml::GetAttribute} "MinStudyLimit" $OLDMINSTUDYLIMIT $1
  ${xml::GetAttribute} "MaxStudyLimit" $OLDMAXSTUDYLIMIT $1
  ${xml::Unload}
  
  ;Save Serverlist
  IfFileExists "$OLDINSTALLDIRDicomAEServers.xml" 0 +3
  CopyFiles /SILENT "$OLDINSTALLDIRDicomAEServers.xml" $TEMP\DicomAEServers.xml
  StrCpy $RESTOREDICOMAESERVERS "True"
  
  ClearErrors
  IfSilent "" +3
    ExecWait '$R0 /S _?=$R1' $R2
    Goto uninstallAttempted

  ExecWait '$R0 _?=$R1' $R2

  uninstallAttempted:
  StrCmp $R2 "0" done failedUninstall
  Abort

  IfErrors failedUninstall
    ;You can either use Delete /REBOOTOK in the uninstaller or add some code
    ;here to remove the uninstaller. Use a registry key to check
    ;whether the user has chosen to uninstall. If you are using an uninstaller
    ;components page, make sure all sections are uninstalled.
  failedUninstall:
  MessageBox MB_OK|MB_ICONSTOP "Installation cannot proceed because there was a problem with the uninstall of the previous version." /SD IDOK
  Abort

  done:
  Delete "$R0"
  Return
  
  noPriorInstall:
  StrCpy $OLDINSTALLDIR ""
  StrCpy $OLDFILESTOREPATH ""
  StrCpy $OLDBADFILEPATH ""
  StrCpy $OLDINTERIMPATH ""
  StrCpy $OLDAETITLE ""
  StrCpy $OLDPORT ""
  Return
FunctionEnd

LangString PageFilestorePath_TITLE ${LANG_ENGLISH} "Specify Filestore Path"
LangString PageFilestorePath_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Filestore Path."

Function PageFilestorePath
  ${If} "$OLDFILESTOREPATH" != ""
    Return
  ${EndIf}
  !insertmacro MUI_HEADER_TEXT "$(PageFilestorePath_TITLE)" "$(PageFilestorePath_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageFilestorePath.ini"
FunctionEnd

Function ValidatePageFilestorePath
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_FILESTOREPATH "PageFilestorePath.ini" "Field 2" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_INTERIMPATH "PageFilestorePath.ini" "Field 4" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_BADFILEPATH "PageFilestorePath.ini" "Field 6" "State"
  StrCmp $INI_FILESTOREPATH "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Filestore Path cannot be blank. Please enter a path."
    Abort
  StrCmp $INI_INTERIMPATH "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Interim Path cannot be blank. Please enter a path."
    Abort
  StrCmp $INI_BADFILEPATH "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Bad File Path cannot be blank. Please enter a path."
    Abort
FunctionEnd

LangString PageDicomServerSettings_TITLE ${LANG_ENGLISH} "Dicom Server Settings"
LangString PageDicomServerSettings_SUBTITLE ${LANG_ENGLISH} "This page is used to enter the Dicom Server settings."

Function PageDicomServerSettings
  ${If} "$OLDAETITLE" != ""
    Return
  ${EndIf}
  !insertmacro MUI_HEADER_TEXT "$(PageDicomServerSettings_TITLE)" "$(PageDicomServerSettings_SUBTITLE)"
  !insertmacro MUI_INSTALLOPTIONS_DISPLAY "PageDicomServerSettings.ini"
FunctionEnd

Function ValidatePageDicomServerSettings
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_AETITLE "PageDicomServerSettings.ini" "Field 2" "State"
  !insertmacro MUI_INSTALLOPTIONS_READ $INI_PORT "PageDicomServerSettings.ini" "Field 4" "State"
  StrCmp $INI_AETITLE "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "AE Title cannot be blank. Please enter an AE Title"
    Abort
  StrCmp $INI_PORT "" "" +3
    MessageBox MB_ICONEXCLAMATION|MB_OK "Interim Path cannot be blank. Please enter a path."
    Abort
FunctionEnd

#un.Function Includes
!insertmacro RemoveService "ClearCanvas.Server.ShredHostService.exe" "ClearCanvas Shred Host Service"

Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK "$(^Name) was successfully removed from your computer." /SD IDOK
FunctionEnd

Function un.onInit
  !insertmacro MUI_UNGETLANGUAGE
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2 "Are you sure you want to completely remove $(^Name) and all of its components?" /SD IDYES IDYES +2
  Abort
FunctionEnd

Function un.KillPro
   StrCpy $0 "ClearCanvas.Desktop.Executable.exe"
   DetailPrint "Searching for processes called '$0'"
   KillProc::FindProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Found $0 processes"

   StrCmp $0 "0" completed
   Sleep 1500

   StrCpy $0 "ClearCanvas.Desktop.Executable.exe"
   DetailPrint "Killing all processes called '$0'"
   KillProc::KillProcesses
   StrCmp $1 "-1" killError
   DetailPrint "-> Killed $0 processes, failed to kill $1 processes"
   Sleep 1500

   Goto completed

   killError:
   DetailPrint "-> Error: The application is running and cannot be stopped. Please close before uninstalling"
   Abort

   completed:
   DetailPrint "Uninstalling"

FunctionEnd

Section Uninstall
  SetShellVarContext all
  
  !undef UN
  !define UN "un."

  ${If} ${PLATFORM_NAME} == "x86"
    Call un.KillPro
  ${ElseIf} ${PLATFORM_NAME} == "x64"
    MessageBox MB_OK|MB_ICONEXCLAMATION "Ensure that all instances of ${PRODUCT_NAME} are closed before continuing with the uninstall." /SD IDOK
  ${EndIf}

  Call un.RemoveService
  Delete "$INSTDIR\*.*"

  Delete "$SMPROGRAMS\ClearCanvas\Website.lnk"
  Delete "$DESKTOP\ClearCanvas Workstation.lnk"
  Delete "$SMPROGRAMS\ClearCanvas\ClearCanvas Workstation.lnk"

  RMDir /r "$INSTDIR\eFilmAutomationFacade"
  RMDir /r "$INSTDIR\badfiles"
  RMDir /r "$INSTDIR\dicom_interim"
  RMDir "$INSTDIR\filestore"
  RMDir /r "$INSTDIR\plugins"
  RMDir /r "$INSTDIR\dicom_datastore"
  RMDir /r "$INSTDIR\common"
  RMDir "$INSTDIR"
  RMDir "$SMPROGRAMS\ClearCanvas"

  DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
  DeleteRegKey HKLM "${PRODUCT_DIR_REGKEY}"
  SetAutoClose true
  
  StrCpy $0 "$INSTDIR\uninstall.log"
  Push $0
  Call un.DumpLog
SectionEnd
