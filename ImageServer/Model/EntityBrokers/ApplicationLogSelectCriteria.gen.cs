#region License

// Copyright (c) 2010, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;

    public partial class ApplicationLogSelectCriteria : EntitySelectCriteria
    {
        public ApplicationLogSelectCriteria()
        : base("ApplicationLog")
        {}
        public ApplicationLogSelectCriteria(ApplicationLogSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new ApplicationLogSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Host")]
        public ISearchCondition<String> Host
        {
            get
            {
              if (!SubCriteria.ContainsKey("Host"))
              {
                 SubCriteria["Host"] = new SearchCondition<String>("Host");
              }
              return (ISearchCondition<String>)SubCriteria["Host"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Timestamp")]
        public ISearchCondition<DateTime> Timestamp
        {
            get
            {
              if (!SubCriteria.ContainsKey("Timestamp"))
              {
                 SubCriteria["Timestamp"] = new SearchCondition<DateTime>("Timestamp");
              }
              return (ISearchCondition<DateTime>)SubCriteria["Timestamp"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="LogLevel")]
        public ISearchCondition<String> LogLevel
        {
            get
            {
              if (!SubCriteria.ContainsKey("LogLevel"))
              {
                 SubCriteria["LogLevel"] = new SearchCondition<String>("LogLevel");
              }
              return (ISearchCondition<String>)SubCriteria["LogLevel"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Thread")]
        public ISearchCondition<String> Thread
        {
            get
            {
              if (!SubCriteria.ContainsKey("Thread"))
              {
                 SubCriteria["Thread"] = new SearchCondition<String>("Thread");
              }
              return (ISearchCondition<String>)SubCriteria["Thread"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Message")]
        public ISearchCondition<String> Message
        {
            get
            {
              if (!SubCriteria.ContainsKey("Message"))
              {
                 SubCriteria["Message"] = new SearchCondition<String>("Message");
              }
              return (ISearchCondition<String>)SubCriteria["Message"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ApplicationLog", ColumnName="Exception")]
        public ISearchCondition<String> Exception
        {
            get
            {
              if (!SubCriteria.ContainsKey("Exception"))
              {
                 SubCriteria["Exception"] = new SearchCondition<String>("Exception");
              }
              return (ISearchCondition<String>)SubCriteria["Exception"];
            } 
        }
    }
}
