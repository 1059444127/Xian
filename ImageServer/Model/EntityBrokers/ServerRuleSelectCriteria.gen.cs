#region License

// Copyright (c) 2011, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;

    public partial class ServerRuleSelectCriteria : EntitySelectCriteria
    {
        public ServerRuleSelectCriteria()
        : base("ServerRule")
        {}
        public ServerRuleSelectCriteria(ServerRuleSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new ServerRuleSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="RuleName")]
        public ISearchCondition<String> RuleName
        {
            get
            {
              if (!SubCriteria.ContainsKey("RuleName"))
              {
                 SubCriteria["RuleName"] = new SearchCondition<String>("RuleName");
              }
              return (ISearchCondition<String>)SubCriteria["RuleName"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="ServerPartitionGUID")]
        public ISearchCondition<ServerEntityKey> ServerPartitionKey
        {
            get
            {
              if (!SubCriteria.ContainsKey("ServerPartitionKey"))
              {
                 SubCriteria["ServerPartitionKey"] = new SearchCondition<ServerEntityKey>("ServerPartitionKey");
              }
              return (ISearchCondition<ServerEntityKey>)SubCriteria["ServerPartitionKey"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="ServerRuleTypeEnum")]
        public ISearchCondition<ServerRuleTypeEnum> ServerRuleTypeEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("ServerRuleTypeEnum"))
              {
                 SubCriteria["ServerRuleTypeEnum"] = new SearchCondition<ServerRuleTypeEnum>("ServerRuleTypeEnum");
              }
              return (ISearchCondition<ServerRuleTypeEnum>)SubCriteria["ServerRuleTypeEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="ServerRuleApplyTimeEnum")]
        public ISearchCondition<ServerRuleApplyTimeEnum> ServerRuleApplyTimeEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("ServerRuleApplyTimeEnum"))
              {
                 SubCriteria["ServerRuleApplyTimeEnum"] = new SearchCondition<ServerRuleApplyTimeEnum>("ServerRuleApplyTimeEnum");
              }
              return (ISearchCondition<ServerRuleApplyTimeEnum>)SubCriteria["ServerRuleApplyTimeEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="Enabled")]
        public ISearchCondition<Boolean> Enabled
        {
            get
            {
              if (!SubCriteria.ContainsKey("Enabled"))
              {
                 SubCriteria["Enabled"] = new SearchCondition<Boolean>("Enabled");
              }
              return (ISearchCondition<Boolean>)SubCriteria["Enabled"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="DefaultRule")]
        public ISearchCondition<Boolean> DefaultRule
        {
            get
            {
              if (!SubCriteria.ContainsKey("DefaultRule"))
              {
                 SubCriteria["DefaultRule"] = new SearchCondition<Boolean>("DefaultRule");
              }
              return (ISearchCondition<Boolean>)SubCriteria["DefaultRule"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="ExemptRule")]
        public ISearchCondition<Boolean> ExemptRule
        {
            get
            {
              if (!SubCriteria.ContainsKey("ExemptRule"))
              {
                 SubCriteria["ExemptRule"] = new SearchCondition<Boolean>("ExemptRule");
              }
              return (ISearchCondition<Boolean>)SubCriteria["ExemptRule"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerRule", ColumnName="RuleXml")]
        public ISearchCondition<XmlDocument> RuleXml
        {
            get
            {
              if (!SubCriteria.ContainsKey("RuleXml"))
              {
                 SubCriteria["RuleXml"] = new SearchCondition<XmlDocument>("RuleXml");
              }
              return (ISearchCondition<XmlDocument>)SubCriteria["RuleXml"];
            } 
        }
    }
}
