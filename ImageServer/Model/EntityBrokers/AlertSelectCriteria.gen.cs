#region License

// Copyright (c) 2010, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;

    public partial class AlertSelectCriteria : EntitySelectCriteria
    {
        public AlertSelectCriteria()
        : base("Alert")
        {}
        public AlertSelectCriteria(AlertSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new AlertSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="InsertTime")]
        public ISearchCondition<DateTime> InsertTime
        {
            get
            {
              if (!SubCriteria.ContainsKey("InsertTime"))
              {
                 SubCriteria["InsertTime"] = new SearchCondition<DateTime>("InsertTime");
              }
              return (ISearchCondition<DateTime>)SubCriteria["InsertTime"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="Component")]
        public ISearchCondition<String> Component
        {
            get
            {
              if (!SubCriteria.ContainsKey("Component"))
              {
                 SubCriteria["Component"] = new SearchCondition<String>("Component");
              }
              return (ISearchCondition<String>)SubCriteria["Component"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="TypeCode")]
        public ISearchCondition<Int32> TypeCode
        {
            get
            {
              if (!SubCriteria.ContainsKey("TypeCode"))
              {
                 SubCriteria["TypeCode"] = new SearchCondition<Int32>("TypeCode");
              }
              return (ISearchCondition<Int32>)SubCriteria["TypeCode"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="Source")]
        public ISearchCondition<String> Source
        {
            get
            {
              if (!SubCriteria.ContainsKey("Source"))
              {
                 SubCriteria["Source"] = new SearchCondition<String>("Source");
              }
              return (ISearchCondition<String>)SubCriteria["Source"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="AlertLevelEnum")]
        public ISearchCondition<AlertLevelEnum> AlertLevelEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("AlertLevelEnum"))
              {
                 SubCriteria["AlertLevelEnum"] = new SearchCondition<AlertLevelEnum>("AlertLevelEnum");
              }
              return (ISearchCondition<AlertLevelEnum>)SubCriteria["AlertLevelEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="AlertCategoryEnum")]
        public ISearchCondition<AlertCategoryEnum> AlertCategoryEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("AlertCategoryEnum"))
              {
                 SubCriteria["AlertCategoryEnum"] = new SearchCondition<AlertCategoryEnum>("AlertCategoryEnum");
              }
              return (ISearchCondition<AlertCategoryEnum>)SubCriteria["AlertCategoryEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Alert", ColumnName="Content")]
        public ISearchCondition<XmlDocument> Content
        {
            get
            {
              if (!SubCriteria.ContainsKey("Content"))
              {
                 SubCriteria["Content"] = new SearchCondition<XmlDocument>("Content");
              }
              return (ISearchCondition<XmlDocument>)SubCriteria["Content"];
            } 
        }
    }
}
