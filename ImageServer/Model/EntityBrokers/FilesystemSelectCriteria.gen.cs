#region License

// Copyright (c) 2011, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0//

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model.EntityBrokers
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;

    public partial class FilesystemSelectCriteria : EntitySelectCriteria
    {
        public FilesystemSelectCriteria()
        : base("Filesystem")
        {}
        public FilesystemSelectCriteria(FilesystemSelectCriteria other)
        : base(other)
        {}
        public override object Clone()
        {
            return new FilesystemSelectCriteria(this);
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="FilesystemPath")]
        public ISearchCondition<String> FilesystemPath
        {
            get
            {
              if (!SubCriteria.ContainsKey("FilesystemPath"))
              {
                 SubCriteria["FilesystemPath"] = new SearchCondition<String>("FilesystemPath");
              }
              return (ISearchCondition<String>)SubCriteria["FilesystemPath"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="Enabled")]
        public ISearchCondition<Boolean> Enabled
        {
            get
            {
              if (!SubCriteria.ContainsKey("Enabled"))
              {
                 SubCriteria["Enabled"] = new SearchCondition<Boolean>("Enabled");
              }
              return (ISearchCondition<Boolean>)SubCriteria["Enabled"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="ReadOnly")]
        public ISearchCondition<Boolean> ReadOnly
        {
            get
            {
              if (!SubCriteria.ContainsKey("ReadOnly"))
              {
                 SubCriteria["ReadOnly"] = new SearchCondition<Boolean>("ReadOnly");
              }
              return (ISearchCondition<Boolean>)SubCriteria["ReadOnly"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="WriteOnly")]
        public ISearchCondition<Boolean> WriteOnly
        {
            get
            {
              if (!SubCriteria.ContainsKey("WriteOnly"))
              {
                 SubCriteria["WriteOnly"] = new SearchCondition<Boolean>("WriteOnly");
              }
              return (ISearchCondition<Boolean>)SubCriteria["WriteOnly"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="FilesystemTierEnum")]
        public ISearchCondition<FilesystemTierEnum> FilesystemTierEnum
        {
            get
            {
              if (!SubCriteria.ContainsKey("FilesystemTierEnum"))
              {
                 SubCriteria["FilesystemTierEnum"] = new SearchCondition<FilesystemTierEnum>("FilesystemTierEnum");
              }
              return (ISearchCondition<FilesystemTierEnum>)SubCriteria["FilesystemTierEnum"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="LowWatermark")]
        public ISearchCondition<Decimal> LowWatermark
        {
            get
            {
              if (!SubCriteria.ContainsKey("LowWatermark"))
              {
                 SubCriteria["LowWatermark"] = new SearchCondition<Decimal>("LowWatermark");
              }
              return (ISearchCondition<Decimal>)SubCriteria["LowWatermark"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="HighWatermark")]
        public ISearchCondition<Decimal> HighWatermark
        {
            get
            {
              if (!SubCriteria.ContainsKey("HighWatermark"))
              {
                 SubCriteria["HighWatermark"] = new SearchCondition<Decimal>("HighWatermark");
              }
              return (ISearchCondition<Decimal>)SubCriteria["HighWatermark"];
            } 
        }
        [EntityFieldDatabaseMappingAttribute(TableName="Filesystem", ColumnName="Description")]
        public ISearchCondition<String> Description
        {
            get
            {
              if (!SubCriteria.ContainsKey("Description"))
              {
                 SubCriteria["Description"] = new SearchCondition<String>("Description");
              }
              return (ISearchCondition<String>)SubCriteria["Description"];
            } 
        }
    }
}
