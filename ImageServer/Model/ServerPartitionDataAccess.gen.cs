#region License

// Copyright (c) 2011, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0//

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class ServerPartitionDataAccess: ServerEntity
    {
        #region Constructors
        public ServerPartitionDataAccess():base("ServerPartitionDataAccess")
        {}
        public ServerPartitionDataAccess(
             ServerEntityKey _dataAccessGroupKey_
            ,ServerEntityKey _serverPartitionKey_
            ):base("ServerPartitionDataAccess")
        {
            DataAccessGroupKey = _dataAccessGroupKey_;
            ServerPartitionKey = _serverPartitionKey_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionDataAccess", ColumnName="DataAccessGroupGUID")]
        public ServerEntityKey DataAccessGroupKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerPartitionDataAccess", ColumnName="ServerPartitionGUID")]
        public ServerEntityKey ServerPartitionKey
        { get; set; }
        #endregion

        #region Static Methods
        static public ServerPartitionDataAccess Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public ServerPartitionDataAccess Load(IPersistenceContext read, ServerEntityKey key)
        {
            IServerPartitionDataAccessEntityBroker broker = read.GetBroker<IServerPartitionDataAccessEntityBroker>();
            ServerPartitionDataAccess theObject = broker.Load(key);
            return theObject;
        }
        static public ServerPartitionDataAccess Insert(ServerPartitionDataAccess entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                ServerPartitionDataAccess newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public ServerPartitionDataAccess Insert(IUpdateContext update, ServerPartitionDataAccess entity)
        {
            IServerPartitionDataAccessEntityBroker broker = update.GetBroker<IServerPartitionDataAccessEntityBroker>();
            ServerPartitionDataAccessUpdateColumns updateColumns = new ServerPartitionDataAccessUpdateColumns();
            updateColumns.DataAccessGroupKey = entity.DataAccessGroupKey;
            updateColumns.ServerPartitionKey = entity.ServerPartitionKey;
            ServerPartitionDataAccess newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
