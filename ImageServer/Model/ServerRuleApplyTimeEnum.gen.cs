#region License

// Copyright (c) 2010, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Collections.Generic;
    using ClearCanvas.ImageServer.Model.EntityBrokers;
    using ClearCanvas.ImageServer.Enterprise;
    using System.Reflection;

[Serializable]
public partial class ServerRuleApplyTimeEnum : ServerEnum
{
      #region Private Static Members
      private static readonly ServerRuleApplyTimeEnum _SopReceived = GetEnum("SopReceived");
      private static readonly ServerRuleApplyTimeEnum _SopProcessed = GetEnum("SopProcessed");
      private static readonly ServerRuleApplyTimeEnum _SeriesProcessed = GetEnum("SeriesProcessed");
      private static readonly ServerRuleApplyTimeEnum _StudyProcessed = GetEnum("StudyProcessed");
      private static readonly ServerRuleApplyTimeEnum _StudyArchived = GetEnum("StudyArchived");
      private static readonly ServerRuleApplyTimeEnum _StudyRestored = GetEnum("StudyRestored");
      private static readonly ServerRuleApplyTimeEnum _SopEdited = GetEnum("SopEdited");
      #endregion

      #region Public Static Properties
      /// <summary>
      /// Apply rule when a SOP Instance has been received
      /// </summary>
      public static ServerRuleApplyTimeEnum SopReceived
      {
          get { return _SopReceived; }
      }
      /// <summary>
      /// Apply rule when a SOP Instance has been processed
      /// </summary>
      public static ServerRuleApplyTimeEnum SopProcessed
      {
          get { return _SopProcessed; }
      }
      /// <summary>
      /// Apply rule when a Series is initially processed
      /// </summary>
      public static ServerRuleApplyTimeEnum SeriesProcessed
      {
          get { return _SeriesProcessed; }
      }
      /// <summary>
      /// Apply rule after a Study has been processed
      /// </summary>
      public static ServerRuleApplyTimeEnum StudyProcessed
      {
          get { return _StudyProcessed; }
      }
      /// <summary>
      /// Apply rule after a Study is archived
      /// </summary>
      public static ServerRuleApplyTimeEnum StudyArchived
      {
          get { return _StudyArchived; }
      }
      /// <summary>
      /// Apply rule after a Study has been restored
      /// </summary>
      public static ServerRuleApplyTimeEnum StudyRestored
      {
          get { return _StudyRestored; }
      }
      /// <summary>
      /// Apply rule when a SOP Instance is edited
      /// </summary>
      public static ServerRuleApplyTimeEnum SopEdited
      {
          get { return _SopEdited; }
      }

      #endregion

      #region Constructors
      public ServerRuleApplyTimeEnum():base("ServerRuleApplyTimeEnum")
      {}
      #endregion
      #region Public Members
      public override void SetEnum(short val)
      {
          ServerEnumHelper<ServerRuleApplyTimeEnum, IServerRuleApplyTimeEnumBroker>.SetEnum(this, val);
      }
      static public List<ServerRuleApplyTimeEnum> GetAll()
      {
          return ServerEnumHelper<ServerRuleApplyTimeEnum, IServerRuleApplyTimeEnumBroker>.GetAll();
      }
      static public ServerRuleApplyTimeEnum GetEnum(string lookup)
      {
          return ServerEnumHelper<ServerRuleApplyTimeEnum, IServerRuleApplyTimeEnumBroker>.GetEnum(lookup);
      }
      #endregion
}
}
