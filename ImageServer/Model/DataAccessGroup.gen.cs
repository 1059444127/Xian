#region License

// Copyright (c) 2011, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0//

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class DataAccessGroup: ServerEntity
    {
        #region Constructors
        public DataAccessGroup():base("DataAccessGroup")
        {}
        public DataAccessGroup(
             ServerEntityKey _authorityGroupOID_
            ,Boolean _deleted_
            ):base("DataAccessGroup")
        {
            AuthorityGroupOID = _authorityGroupOID_;
            Deleted = _deleted_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="DataAccessGroup", ColumnName="AuthorityGroupOID")]
        public ServerEntityKey AuthorityGroupOID
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="DataAccessGroup", ColumnName="Deleted")]
        public Boolean Deleted
        { get; set; }
        #endregion

        #region Static Methods
        static public DataAccessGroup Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public DataAccessGroup Load(IPersistenceContext read, ServerEntityKey key)
        {
            IDataAccessGroupEntityBroker broker = read.GetBroker<IDataAccessGroupEntityBroker>();
            DataAccessGroup theObject = broker.Load(key);
            return theObject;
        }
        static public DataAccessGroup Insert(DataAccessGroup entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                DataAccessGroup newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public DataAccessGroup Insert(IUpdateContext update, DataAccessGroup entity)
        {
            IDataAccessGroupEntityBroker broker = update.GetBroker<IDataAccessGroupEntityBroker>();
            DataAccessGroupUpdateColumns updateColumns = new DataAccessGroupUpdateColumns();
            updateColumns.AuthorityGroupOID = entity.AuthorityGroupOID;
            updateColumns.Deleted = entity.Deleted;
            DataAccessGroup newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
