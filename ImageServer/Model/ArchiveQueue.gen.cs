#region License

// Copyright (c) 2011, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0//

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class ArchiveQueue: ServerEntity
    {
        #region Constructors
        public ArchiveQueue():base("ArchiveQueue")
        {}
        public ArchiveQueue(
             ServerEntityKey _partitionArchiveKey_
            ,DateTime _scheduledTime_
            ,ServerEntityKey _studyStorageKey_
            ,ArchiveQueueStatusEnum _archiveQueueStatusEnum_
            ,String _processorId_
            ,String _failureDescription_
            ):base("ArchiveQueue")
        {
            PartitionArchiveKey = _partitionArchiveKey_;
            ScheduledTime = _scheduledTime_;
            StudyStorageKey = _studyStorageKey_;
            ArchiveQueueStatusEnum = _archiveQueueStatusEnum_;
            ProcessorId = _processorId_;
            FailureDescription = _failureDescription_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveQueue", ColumnName="PartitionArchiveGUID")]
        public ServerEntityKey PartitionArchiveKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveQueue", ColumnName="ScheduledTime")]
        public DateTime ScheduledTime
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveQueue", ColumnName="StudyStorageGUID")]
        public ServerEntityKey StudyStorageKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveQueue", ColumnName="ArchiveQueueStatusEnum")]
        public ArchiveQueueStatusEnum ArchiveQueueStatusEnum
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveQueue", ColumnName="ProcessorId")]
        public String ProcessorId
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveQueue", ColumnName="FailureDescription")]
        public String FailureDescription
        { get; set; }
        #endregion

        #region Static Methods
        static public ArchiveQueue Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public ArchiveQueue Load(IPersistenceContext read, ServerEntityKey key)
        {
            IArchiveQueueEntityBroker broker = read.GetBroker<IArchiveQueueEntityBroker>();
            ArchiveQueue theObject = broker.Load(key);
            return theObject;
        }
        static public ArchiveQueue Insert(ArchiveQueue entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                ArchiveQueue newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public ArchiveQueue Insert(IUpdateContext update, ArchiveQueue entity)
        {
            IArchiveQueueEntityBroker broker = update.GetBroker<IArchiveQueueEntityBroker>();
            ArchiveQueueUpdateColumns updateColumns = new ArchiveQueueUpdateColumns();
            updateColumns.PartitionArchiveKey = entity.PartitionArchiveKey;
            updateColumns.ScheduledTime = entity.ScheduledTime;
            updateColumns.StudyStorageKey = entity.StudyStorageKey;
            updateColumns.ArchiveQueueStatusEnum = entity.ArchiveQueueStatusEnum;
            updateColumns.ProcessorId = entity.ProcessorId;
            updateColumns.FailureDescription = entity.FailureDescription;
            ArchiveQueue newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
