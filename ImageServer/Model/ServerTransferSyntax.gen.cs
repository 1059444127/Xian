#region License

// Copyright (c) 2010, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Dicom;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class ServerTransferSyntax: ServerEntity
    {
        #region Constructors
        public ServerTransferSyntax():base("ServerTransferSyntax")
        {}
        public ServerTransferSyntax(
             String _uid_
            ,String _description_
            ,Boolean _lossless_
            ):base("ServerTransferSyntax")
        {
            Uid = _uid_;
            Description = _description_;
            Lossless = _lossless_;
        }
        #endregion

        #region Public Properties
        [DicomField(DicomTags.Uid, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="ServerTransferSyntax", ColumnName="Uid")]
        public String Uid
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerTransferSyntax", ColumnName="Description")]
        public String Description
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ServerTransferSyntax", ColumnName="Lossless")]
        public Boolean Lossless
        { get; set; }
        #endregion

        #region Static Methods
        static public ServerTransferSyntax Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public ServerTransferSyntax Load(IPersistenceContext read, ServerEntityKey key)
        {
            IServerTransferSyntaxEntityBroker broker = read.GetBroker<IServerTransferSyntaxEntityBroker>();
            ServerTransferSyntax theObject = broker.Load(key);
            return theObject;
        }
        static public ServerTransferSyntax Insert(ServerTransferSyntax entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                ServerTransferSyntax newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public ServerTransferSyntax Insert(IUpdateContext update, ServerTransferSyntax entity)
        {
            IServerTransferSyntaxEntityBroker broker = update.GetBroker<IServerTransferSyntaxEntityBroker>();
            ServerTransferSyntaxUpdateColumns updateColumns = new ServerTransferSyntaxUpdateColumns();
            updateColumns.Uid = entity.Uid;
            updateColumns.Description = entity.Description;
            updateColumns.Lossless = entity.Lossless;
            ServerTransferSyntax newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
