#region License

// Copyright (c) 2010, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class ArchiveStudyStorage: ServerEntity
    {
        #region Constructors
        public ArchiveStudyStorage():base("ArchiveStudyStorage")
        {}
        public ArchiveStudyStorage(
             ServerEntityKey _partitionArchiveKey_
            ,ServerEntityKey _studyStorageKey_
            ,ServerEntityKey _serverTransferSyntaxKey_
            ,DateTime _archiveTime_
            ,XmlDocument _archiveXml_
            ):base("ArchiveStudyStorage")
        {
            PartitionArchiveKey = _partitionArchiveKey_;
            StudyStorageKey = _studyStorageKey_;
            ServerTransferSyntaxKey = _serverTransferSyntaxKey_;
            ArchiveTime = _archiveTime_;
            ArchiveXml = _archiveXml_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveStudyStorage", ColumnName="PartitionArchiveGUID")]
        public ServerEntityKey PartitionArchiveKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveStudyStorage", ColumnName="StudyStorageGUID")]
        public ServerEntityKey StudyStorageKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveStudyStorage", ColumnName="ServerTransferSyntaxGUID")]
        public ServerEntityKey ServerTransferSyntaxKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveStudyStorage", ColumnName="ArchiveTime")]
        public DateTime ArchiveTime
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="ArchiveStudyStorage", ColumnName="ArchiveXml")]
        public XmlDocument ArchiveXml
        { get; set; }
        #endregion

        #region Static Methods
        static public ArchiveStudyStorage Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public ArchiveStudyStorage Load(IPersistenceContext read, ServerEntityKey key)
        {
            IArchiveStudyStorageEntityBroker broker = read.GetBroker<IArchiveStudyStorageEntityBroker>();
            ArchiveStudyStorage theObject = broker.Load(key);
            return theObject;
        }
        static public ArchiveStudyStorage Insert(ArchiveStudyStorage entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                ArchiveStudyStorage newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public ArchiveStudyStorage Insert(IUpdateContext update, ArchiveStudyStorage entity)
        {
            IArchiveStudyStorageEntityBroker broker = update.GetBroker<IArchiveStudyStorageEntityBroker>();
            ArchiveStudyStorageUpdateColumns updateColumns = new ArchiveStudyStorageUpdateColumns();
            updateColumns.PartitionArchiveKey = entity.PartitionArchiveKey;
            updateColumns.StudyStorageKey = entity.StudyStorageKey;
            updateColumns.ServerTransferSyntaxKey = entity.ServerTransferSyntaxKey;
            updateColumns.ArchiveTime = entity.ArchiveTime;
            updateColumns.ArchiveXml = entity.ArchiveXml;
            ArchiveStudyStorage newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
