#region License

// Copyright (c) 2010, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class StudyHistory: ServerEntity
    {
        #region Constructors
        public StudyHistory():base("StudyHistory")
        {}
        public StudyHistory(
             DateTime _insertTime_
            ,ServerEntityKey _studyStorageKey_
            ,StudyHistoryTypeEnum _studyHistoryTypeEnum_
            ,XmlDocument _studyData_
            ,XmlDocument _changeDescription_
            ,ServerEntityKey _destStudyStorageKey_
            ):base("StudyHistory")
        {
            InsertTime = _insertTime_;
            StudyStorageKey = _studyStorageKey_;
            StudyHistoryTypeEnum = _studyHistoryTypeEnum_;
            StudyData = _studyData_;
            ChangeDescription = _changeDescription_;
            DestStudyStorageKey = _destStudyStorageKey_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="StudyHistory", ColumnName="InsertTime")]
        public DateTime InsertTime
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyHistory", ColumnName="StudyStorageGUID")]
        public ServerEntityKey StudyStorageKey
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyHistory", ColumnName="StudyHistoryTypeEnum")]
        public StudyHistoryTypeEnum StudyHistoryTypeEnum
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyHistory", ColumnName="StudyData")]
        public XmlDocument StudyData
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyHistory", ColumnName="ChangeDescription")]
        public XmlDocument ChangeDescription
        { get; set; }
        [EntityFieldDatabaseMappingAttribute(TableName="StudyHistory", ColumnName="DestStudyStorageGUID")]
        public ServerEntityKey DestStudyStorageKey
        { get; set; }
        #endregion

        #region Static Methods
        static public StudyHistory Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public StudyHistory Load(IPersistenceContext read, ServerEntityKey key)
        {
            IStudyHistoryEntityBroker broker = read.GetBroker<IStudyHistoryEntityBroker>();
            StudyHistory theObject = broker.Load(key);
            return theObject;
        }
        static public StudyHistory Insert(StudyHistory entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                StudyHistory newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public StudyHistory Insert(IUpdateContext update, StudyHistory entity)
        {
            IStudyHistoryEntityBroker broker = update.GetBroker<IStudyHistoryEntityBroker>();
            StudyHistoryUpdateColumns updateColumns = new StudyHistoryUpdateColumns();
            updateColumns.InsertTime = entity.InsertTime;
            updateColumns.StudyStorageKey = entity.StudyStorageKey;
            updateColumns.StudyHistoryTypeEnum = entity.StudyHistoryTypeEnum;
            updateColumns.StudyData = entity.StudyData;
            updateColumns.ChangeDescription = entity.ChangeDescription;
            updateColumns.DestStudyStorageKey = entity.DestStudyStorageKey;
            StudyHistory newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
