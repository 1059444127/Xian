#region License

// Copyright (c) 2010, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

// This file is auto-generated by the ClearCanvas.Model.SqlServer2005.CodeGenerator project.

namespace ClearCanvas.ImageServer.Model
{
    using System;
    using System.Xml;
    using ClearCanvas.Dicom;
    using ClearCanvas.Enterprise.Core;
    using ClearCanvas.ImageServer.Enterprise;
    using ClearCanvas.ImageServer.Model.EntityBrokers;

    [Serializable]
    public partial class RequestAttributes: ServerEntity
    {
        #region Constructors
        public RequestAttributes():base("RequestAttributes")
        {}
        public RequestAttributes(
             ServerEntityKey _seriesKey_
            ,String _requestedProcedureId_
            ,String _scheduledProcedureStepId_
            ):base("RequestAttributes")
        {
            SeriesKey = _seriesKey_;
            RequestedProcedureId = _requestedProcedureId_;
            ScheduledProcedureStepId = _scheduledProcedureStepId_;
        }
        #endregion

        #region Public Properties
        [EntityFieldDatabaseMappingAttribute(TableName="RequestAttributes", ColumnName="SeriesGUID")]
        public ServerEntityKey SeriesKey
        { get; set; }
        [DicomField(DicomTags.RequestedProcedureId, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="RequestAttributes", ColumnName="RequestedProcedureId")]
        public String RequestedProcedureId
        { get; set; }
        [DicomField(DicomTags.ScheduledProcedureStepId, DefaultValue = DicomFieldDefault.Null)]
        [EntityFieldDatabaseMappingAttribute(TableName="RequestAttributes", ColumnName="ScheduledProcedureStepId")]
        public String ScheduledProcedureStepId
        { get; set; }
        #endregion

        #region Static Methods
        static public RequestAttributes Load(ServerEntityKey key)
        {
            using (IReadContext read = PersistentStoreRegistry.GetDefaultStore().OpenReadContext())
            {
                return Load(read, key);
            }
        }
        static public RequestAttributes Load(IPersistenceContext read, ServerEntityKey key)
        {
            IRequestAttributesEntityBroker broker = read.GetBroker<IRequestAttributesEntityBroker>();
            RequestAttributes theObject = broker.Load(key);
            return theObject;
        }
        static public RequestAttributes Insert(RequestAttributes entity)
        {
            using (IUpdateContext update = PersistentStoreRegistry.GetDefaultStore().OpenUpdateContext(UpdateContextSyncMode.Flush))
            {
                RequestAttributes newEntity = Insert(update, entity);
                update.Commit();
                return newEntity;
            }
        }
        static public RequestAttributes Insert(IUpdateContext update, RequestAttributes entity)
        {
            IRequestAttributesEntityBroker broker = update.GetBroker<IRequestAttributesEntityBroker>();
            RequestAttributesUpdateColumns updateColumns = new RequestAttributesUpdateColumns();
            updateColumns.SeriesKey = entity.SeriesKey;
            updateColumns.RequestedProcedureId = entity.RequestedProcedureId;
            updateColumns.ScheduledProcedureStepId = entity.ScheduledProcedureStepId;
            RequestAttributes newEntity = broker.Insert(updateColumns);
            return newEntity;
        }
        #endregion
    }
}
