#region License

// Copyright (c) 2011, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

using ClearCanvas.Common.Audit;

namespace ClearCanvas.Enterprise.Core
{
	/// <summary>
	/// Abstract base implementation of <see cref="IServiceOperationRecorder"/>.
	/// </summary>
	public abstract class ServiceOperationRecorderBase : IServiceOperationRecorder
	{
		#region IServiceOperationRecorder Members

		/// <summary>
		/// Writes the specified service operation invocation to the specified audit log.
		/// </summary>
		void IServiceOperationRecorder.WriteLogEntry(ServiceOperationInvocationInfo invocationInfo, AuditLog auditLog)
		{
			string message;
			var messageGenerated = GenerateMessage(invocationInfo, out message);
			if (messageGenerated)
			{
				auditLog.WriteEntry(invocationInfo.OperationName, message);
			}
		}

		/// <summary>
		/// Gets the category of the audit log entries generated by this recorder.
		/// </summary>
		string IServiceOperationRecorder.Category
		{
			get { return Category; }
		}

		#endregion

		#region Protected API

		/// <summary>
		/// Gets the category that should be assigned to the audit entries.
		/// </summary>
		protected abstract string Category { get; }

		/// <summary>
		/// Writes the detailed message to the specified XML writer.
		/// </summary>
		/// <param name="invocationInfo"></param>
		/// <param name="message"> </param>
		/// <returns>True if a log message was written, or false to indicate that no log message was written.</returns>
		/// <remarks>
		/// The resulting message will be used to populate the audit log Details property.
		/// Return false to opt out of auditing the specified invocation (for example, if the invocation
		/// inidcates that an exception was thrown by the service, you may not want to audit it).
		/// </remarks>
		protected abstract bool GenerateMessage(ServiceOperationInvocationInfo invocationInfo, out string message);

		#endregion


	}
}
