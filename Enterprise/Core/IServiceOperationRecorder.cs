#region License

// Copyright (c) 2011, ClearCanvas Inc.
// All rights reserved.
// http://www.clearcanvas.ca
//
// This software is licensed under the Open Software License v3.0.
// For the complete license, see http://www.clearcanvas.ca/OSLv3.0

#endregion

using System;
using System.Reflection;
using ClearCanvas.Common.Audit;

namespace ClearCanvas.Enterprise.Core
{
	/// <summary>
	/// Describes the invocation of a service operation, including the request, response, and any exception thrown.
	/// </summary>
	public class ServiceOperationInvocationInfo
	{
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="operationName"></param>
		/// <param name="serviceClass"></param>
		/// <param name="operation"></param>
		/// <param name="request"></param>
		/// <param name="response"></param>
		/// <param name="exception"></param>
		internal ServiceOperationInvocationInfo(string operationName, Type serviceClass, MethodInfo operation, object request,
			object response, Exception exception)
		{
			OperationName = operationName;
			ServiceClass = serviceClass;
			OperationMethodInfo = operation;
			Request = request;
			Response = response;
			Exception = exception;
		}

		/// <summary>
		/// Gets the logical name of the operation.
		/// </summary>
		public string OperationName { get; private set; }

		/// <summary>
		/// Gets the class that provides the service implementation.
		/// </summary>
		public Type ServiceClass { get; private set; }

		/// <summary>
		/// Gets the <see cref="MethodInfo"/> object describing the operation.
		/// </summary>
		public MethodInfo OperationMethodInfo { get; private set; }

		/// <summary>
		/// Gets the request object passed to the operation.
		/// </summary>
		public object Request { get; private set; }

		/// <summary>
		/// Gets the response object returned from the operation, or null if an exception was thrown.
		/// </summary>
		public object Response { get; private set; }

		/// <summary>
		/// Gets any unhandled exception thrown from the service operation, or null if the 
		/// operation completed successfully.
		/// </summary>
		public Exception Exception { get; private set; }
	}


	/// <summary>
	/// Defines an interface for writing an audit log entry that records
	/// information about the invocation of a service operation.
	/// </summary>
	public interface IServiceOperationRecorder
	{
		/// <summary>
		/// Gets the category of the audit log entries generated by this recorder.
		/// </summary>
		string Category { get; }

		/// <summary>
		/// Writes the specified service operation invocation to the specified audit log.
		/// </summary>
		void WriteLogEntry(ServiceOperationInvocationInfo invocationInfo, AuditLog auditLog);
	}
}
